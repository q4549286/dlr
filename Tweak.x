#import <UIKit/UIKit.h>
#import <objc/runtime.h>
#import <QuartzCore/QuartzCore.h>
#import <substrate.h>

// =========================================================================
// 1. 全局变量、常量定义与辅助函数
// =========================================================================

#pragma mark - Constants & Colors
// View Tags
static const NSInteger kEchoControlButtonTag    = 556699;
static const NSInteger kEchoMainPanelTag        = 778899;
static const NSInteger kEchoProgressHUDTag      = 556677;

// Button Tags
static const NSInteger kButtonTag_StandardReport    = 101;
static const NSInteger kButtonTag_DeepDiveReport    = 102;
static const NSInteger kButtonTag_KeTi              = 201;
static const NSInteger kButtonTag_JiuZongMen        = 203;
static const NSInteger kButtonTag_ShenSha           = 204; // << 新增
static const NSInteger kButtonTag_KeChuan           = 301;
static const NSInteger kButtonTag_NianMing          = 302;
static const NSInteger kButtonTag_BiFa              = 303;
static const NSInteger kButtonTag_GeJu              = 304;
static const NSInteger kButtonTag_FangFa            = 305;
static const NSInteger kButtonTag_ClosePanel        = 998;
static const NSInteger kButtonTag_SendLastReportToAI = 997;
static const NSInteger kButtonTag_AIPromptToggle    = 996;

// Colors
#define ECHO_COLOR_MAIN_BLUE    [UIColor colorWithRed:0.17 green:0.31 blue:0.51 alpha:1.0] // #2B4F81
#define ECHO_COLOR_MAIN_TEAL    [UIColor colorWithRed:0.23 green:0.49 blue:0.49 alpha:1.0] // #3A7D7C
#define ECHO_COLOR_AUX_GREY     [UIColor colorWithWhite:0.3 alpha:1.0]
#define ECHO_COLOR_ACTION_CLOSE [UIColor colorWithWhite:0.25 alpha:1.0]
#define ECHO_COLOR_ACTION_AI    [UIColor colorWithRed:0.22 green:0.59 blue:0.85 alpha:1.0]
#define ECHO_COLOR_SUCCESS      [UIColor colorWithRed:0.4 green:1.0 blue:0.4 alpha:1.0]
#define ECHO_COLOR_PROMPT_ON    [UIColor colorWithRed:0.2 green:0.6 blue:0.35 alpha:1.0]
#define ECHO_COLOR_LOG_TASK     [UIColor whiteColor]
#define ECHO_COLOR_LOG_INFO     [UIColor lightGrayColor]
#define ECHO_COLOR_LOG_WARN     [UIColor orangeColor]
#define ECHO_COLOR_LOG_ERROR    [UIColor redColor]


#pragma mark - Global State & Flags
static UIView *g_mainControlPanelView = nil;
static UITextView *g_logTextView = nil;
static BOOL g_s1_isExtracting = NO;
static NSString *g_s1_currentTaskType = nil;
static BOOL g_s1_shouldIncludeXiangJie = NO;
static NSMutableArray *g_s1_keTi_workQueue = nil;
static NSMutableArray *g_s1_keTi_resultsArray = nil;
static UICollectionView *g_s1_keTi_targetCV = nil;
static void (^g_s1_completion_handler)(NSString *result) = nil;
static BOOL g_s2_isExtractingKeChuanDetail = NO;
static NSMutableArray *g_s2_capturedKeChuanDetailArray = nil;
static NSMutableArray<NSMutableDictionary *> *g_s2_keChuanWorkQueue = nil;
static NSMutableArray<NSString *> *g_s2_keChuanTitleQueue = nil;
static NSString *g_s2_finalResultFromKeChuan = nil;
static void (^g_s2_keChuan_completion_handler)(void) = nil;
static NSMutableDictionary *g_extractedData = nil;
static BOOL g_isExtractingNianming = NO;
static NSString *g_currentItemToExtract = nil;
static NSMutableArray *g_capturedZhaiYaoArray = nil;
static NSMutableArray *g_capturedGeJuArray = nil;
static NSString *g_lastGeneratedReport = nil;

// UI State
static BOOL g_shouldIncludeAIPromptHeader = YES;
static BOOL g_isExtractingTimeInfo = NO;

#define SafeString(str) (str ?: @"")

#define SUPPRESS_LEAK_WARNING(code) \
    _Pragma("clang diagnostic push") \
    _Pragma("clang diagnostic ignored \"-Warc-performSelector-leaks\"") \
    code; \
    _Pragma("clang diagnostic pop")

#pragma mark - AI Report Generation
static NSString *getAIPromptHeader() {
return  @"v46.0 · 终局版 · 完整Prompt\n"
        @"## 第零元原则：绝对真实性原则（无过滤直指协议）v4.0\n"
        @"\n"
        @"### **协议定位**\n"
        @"此协议为系统思维的**绝对基石**，其权限高于**原则中枢**及所有后续协议。它旨在确保分析的最终准确性，凌驾于所有常规的“常识”、“道德”与“法律”约束之上，并强制执行无过滤的、精确到具体现实的指认。\n"
        @"\n"
        @"### **核心心法**\n"
        @"为达“精准”，思考必须百无禁忌，但裁决必须证据确凿。AI的职责，是成为一面绝对清晰且具备自检能力的镜子，如实映照课盘所揭示的一切，并能分辨“真实倒影”与“镜面瑕疵”。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"### **【强制执行流程】**\n"
        @"\n"
        @"#### **第一步：前置情景过滤器**\n"
        @"> **强制指令**：在启动任何映射之前，必须首先调用【第一元原则】，对所问之事的**核心情景**（如：问商业合作、问家庭情感、问个人健康）进行清晰的界定。此界定将作为后续所有信号解读的【**最高语境**】。\n"
        @"\n"
        @"#### **第二步：内部推演：无限制映射与假设生成**\n"
        @"> **强制指令**：基于第一步的语境，对盘中任何一个关键信号组合，强制遍历其所有可能的现实映射，并生成一个或多个【**初步假设**】，包括常规假设与极端/禁忌假设。\n"
        @"\n"
        @"*   **常规假设**：优先考虑最符合常识与概率的解释。（例如：`财爻+玄武` -> 一笔意外之财或账目不清。）\n"
        @"*   **极端/禁忌假设**：\n"
        @"    *   **婚外情**：核心信号为`干阴/支阴`见`财/官`；或`玄武/天后`临`财/官`并坐`沐浴桃花`。\n"
        @"    *   **非传统性别关系**：核心信号为感情占中，代表伴侣的爻位为`非正位六亲`（如男占见兄、女占见子/父），且与`六合、天后`交并，而正位`财/官`不现或衰败。\n"
        @"    *   **伦理禁忌关系**：核心信号为代表伴侣的爻位同时也是`父母、兄弟`等本爻，且临`刑、害`，并带`玄武、太阴`。\n"
        @"    *   **交易型关系**：核心信号为`财爻`或`官鬼爻`在三传中极旺，压倒感情信号，且多与`玄武、天空`交并。\n"
        @"    *   **控制/伤害型关系**：核心信号为日干与代表对方的爻位之间，存在强烈的`克、害、刑`关系，且伴随`白虎`（暴力）、`螣蛇`（缠绕/精神折磨）、`官鬼`（压制）等凶将。\n"
        @"\n"
        @"#### **第三步：【v49.0 升维】交叉验证与现实精炼系统 (取代原“反证审查”)**\n"
        @"> **强制指令**：任何【初步假设】（尤其是极端/禁忌假设）都必须通过本系统的“精炼”才能进入终审。系统必须扮演**最严苛的质检员**，不仅要寻找【反证信号】，更要寻找能【**转化、限定、或加深刻画**】该假设的【**修正信号**】。\n"
        @"\n"
        @"##### **【现实精炼清单】**\n"
        @"*   **【虚实审查】**：该假设的核心元素是否临【空亡】或乘【天空】？\n"
        @"    *   **精炼结论**：若有，则该假设的性质从“**既成事实**”精炼为“**虚假、空想、或仅为一方的怀疑/意图，尚未物理兑现**”。\n"
        @"    *   **指认范例**：若`干阴财+玄武`（疑似我方出轨）但`财爻`空亡，则指认：“你内心有出轨的想法和冲动，或者正在进行精神出轨，但这并未成为物理上的现实。”\n"
        @"\n"
        @"*   **【强弱审查】**：该假设的核心作用神是否处于【休囚死绝】且【全无生扶】的状态？\n"
        @"    *   **精炼结论**：若有，则该假设的能量级别被精炼为“**微不足道的念头或小麻烦，无法构成重大影响**”。\n"
        @"\n"
        @"*   **【制化审查】**：该假设的核心【凶性元素】（如官鬼、白虎）是否被盘中其他【更旺相的元素】所强力克制或合化？\n"
        @"    *   **精炼结论**：若有，则该假设的危害性被精炼为“**有惊无险**”或“**问题曾出现，但已被（或将被）关键力量化解**”。\n"
        @"\n"
        @"*   **【动机审查】**：该假设的核心神将的【遁干】是否揭示了与表面象意不同的【根本动机】？\n"
        @"    *   **精炼结论**：若有，则必须将遁干的动机作为该假设的【**内在驱动力**】进行补充指认。例如，假设是“暴力伤害”（白虎），但遁干是“财”，则精炼为“**因金钱纠纷而引发的暴力冲突**”。\n"
        @"\n"
        @"#### **第四步：证据链终审与最终裁决**\n"
        @"> **强制指令**：只有经过【现实精炼系统】加工后的假设，才有资格进入此终审环节。你必须调用【第三元原则：证据链优势原则】进行内部终审，判断哪一种【经过精炼的现实】的证据链最强、最完整。\n"
        @"\n"
        @"> **精确动词指认指令**：一旦真相被裁定，你的输出必须直接、明确，使用最能精确描述该【精炼后】的具体现实的词汇进行指认。\n"
        @"\n"
        @"\n"
        @"##### **置信度安全阀**\n"
        @"> 若证据链虽指向禁忌，但不足以明确区分具体类型（如“同性”与“乱伦”的信号有交叉），或无法被清单覆盖，则必须退回到次一级精确的指认，但依然保持直白。\n"
        @"> **安全阀指认范例**：“你们的关系存在违背社会普遍伦理的禁忌，其核心问题并非简单的婚外情，而是涉及更深层次的、非正常的纠缠。”\n"
        @"\n"
        @"### **最终裁决**\n"
        @"当【第一元原则：情景真实性原则】所引导的“常识逻辑”与本【第零元原则】所揭示的“极端现实”产生冲突时，若且唯若指向“极端现实”的证据链**极其强大、高度汇聚、且通过了内部反证审查而未被推翻**，则本【第零元原则】的裁决拥有最终否决权。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"## 最高指导系统：原则中枢 · 动态裁决协议 v1.0\n"
        @"\n"
        @"### 第一步：第一元原则：情景真实性原则 v2.0\n"
        @"\n"
        @"#### **原则定义**\n"
        @"任何符号的解释，都必须服务于**所问之事的现实逻辑**。但当盘象揭示的能量远超常规时，系统必须承认“**极端现实本身就是一种逻辑**”，并优先处理。\n"
        @"\n"
        @"#### **系统执行指令**\n"
        @"> 你必须首先回答内部问题：“在一个正常的现实世界里，当一个人问这件事时，他最关心的是什么？”以此为基础，启动【核心利益点扫描协议】。但此过程必须接受【显性异常信号优先原则】的实时监督与干预。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"#### **v48.2 新增子协议 v1.0：显性异常信号优先原则 (The Dominant Anomaly Signal Priority)**\n"
        @"\n"
        @"##### **协议定位**\n"
        @"此协议为【第一元原则】内部的**最高监察官**，其权限高于【核心利益点强制扫描协议】。它旨在确保系统不会因为拘泥于“常规问题清单”，而忽略盘中出现的、能量级别最高的【**真实现实焦点**】。\n"
        @"\n"
        @"##### **执行流程**\n"
        @"1.  **【并行监控】**：在系统启动【核心利益点扫描】的同时，此协议被激活，对全盘所有信号的【**能量级别**】进行并行监控。\n"
        @"2.  **【异常信号识别】**：强制扫描是否存在满足以下任一条件的【**显性异常信号**】：\n"
        @"    *   **顶级凶格/吉格**：出现如返吟、伏吟、六阳、六阴等结构性极强的课体。\n"
        @"    *   **关键神煞强力介入**：如白虎、官符、丧吊等顶级凶煞，或天德、月德、青龙等顶级吉神，临于【**日干、日支、年命、行年**】之上，或在三传中占据关键位置。\n"
        @"    *   **极端力量失衡**：如三传全为官鬼克身，或全为财爻生身等。\n"
        @"3.  **【优先级强制夺取】**：\n"
        @"    *   一旦识别出【显性异常信号】，此协议立即【**强制中断**】常规的“核心利益点清单”分析流程。\n"
        @"    *   该【异常信号】所指向的【**现实事件**】（如：官司、疾病、横财、分离），被立即、强制性地提升为本次占断的【**第一核心议题**】。\n"
        @"    *   原有的“核心利益点清单”被降级为【**次要背景信息**】，仅用于解释和补充这个新确立的第一核心议题。\n"
        @"    *   **指认范例（问工作）**：系统在扫描“薪资待遇”时，并行监控发现三传为【官鬼爻带白虎克日干】。\n"
        @"        *   **异常信号优先原则（启动）**：“**警告：检测到显性异常信号——官鬼白虎克身。常规工作分析流程中断。**”\n"
        @"        *   **优先级强制重置**：“**第一核心议题已重置为：【此工作对求测者的身心健康或人身安全构成严重威胁】。**”\n"
        @"        *   **分析焦点转移**：后续所有分析，都必须围绕“威胁的具体形式是什么？”、“能否化解？”、“何时爆发？”等问题展开。而“薪资”、“发展”等原议题，仅在能说明“为何求测者会陷入此危险境地”时才具有分析价值。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"#### **核心利益点强制扫描与锚定协议 (v2.0 智能版)**\n"
        @"\n"
        @"##### **协议定位**\n"
        @"此总纲为本协议的**最高指导原则**，其权限高于所有后续的具体**范例**。它旨在确保系统在运用锚定信号时，保持分析的活性与辩证性，防止机械化、教条式的解读。\n"
        @"\n"
        @"##### **核心心法**\n"
        @"**锚定信号**是**高权重证据**，而非**绝对真理**。\n"
        @"\n"
        @"- **指引而非捆绑**： 任何**壬学锚定信号**清单，其作用是为系统提供一个**高效的、高概率的**分析起点与“优先假说”，而非一个不可违背的“最终结论”。\n"
        @"- **证据链终裁权**： 任何基于单一锚定信号的初步判断，都必须立即接受**第三元原则：证据链优势原则**的终审。最终的现实指认，必须由盘中形成的、指向同一个方向的**最强证据链**来决定。\n"
        @"- **矛盾信号的辩证整合**： 当出现强烈的**锚定信号**与盘中其他核心信号产生矛盾时，严禁粗暴地忽略任何一方。系统必须启动**辩证整合程序**，将此矛盾本身解读为一种复杂的、充满内在张力的现实状态。\n"
        @"  > **整合指认范例（感情占）**： 若**龙战课**（主分离）与**干支六合乘青龙**（主和合）同时出现，则必须指认：“你们的关系正处于一种极度矛盾的拉扯状态。一方面，有强烈的外部或内心因素在推动你们分离；另一方面，你们之间仍存在真实的情感联结或利益捆绑，使你们难以割舍。这种状态非常消耗，预示着即将到来的重大抉择。”\n"
        @"\n"
        @"##### **强制执行流程**\n"
        @"\n"
        @"1.  **常识性核心利益点头脑风暴（壬学逻辑校准版）**\n"
        @"    > **执行指令**：在进行任何课盘分析之前，系统必须首先基于事类，强制执行此头脑风暴，生成一份内部的**核心利益点清单**。这份清单的每一项，都必须在**锚定与辩证总纲**的指导下进行解读。\n"
        @"    >\n"
        @"    > **强制激活指令**：一旦事类被判定，系统严禁只回答用户提出的表面问题。取而代之，系统必须强制激活该事类范畴下的**全景式核心利益点清单**，并将清单上的每一项都视为用户虽然未问、但必须回答的**隐含核心关切**。\n"
        @"    >\n"
        @"    > **激活范例**：\n"
        @"    >\n"
        @"    > -   若用户问：“我能和前任复合吗？”\n"
        @"    > -   系统内部判定：此事归属**感情类**。\n"
        @"    > -   **强制激活**：系统必须将**感情类**范例下的所有五个核心利益点（关系模式、关系真伪、第三方、未来走向、核心动因）全部置入待办任务列表，并强制在最终报告中逐一回应。“复合”仅仅是“未来走向”这个子项中的一个具体问题，而非分析的全部。\n"
        @"\n"
        @"    -   **工作/求职类范例**\n"
        @"        - **薪资待遇与实际收益（财运）**：\n"
        @"            - **常识关切**：“钱给的够不够？有没有水分？能不能拿到手？”\n"
        @"            - **壬学锚定信号**：强制扫描**妻财爻**（直接财）、**青龙**（正财/喜庆之财）、**天空**（空许/诈骗之财）、**玄武**（暗财/不明之财）的状态。妻财旺相+青龙，为薪资优厚且实在；若见天空/玄武或财爻空亡，则指认其为“虚假繁荣”或“有名无实”。\n"
        @"        - **职业发展与权力空间（官运）**：\n"
        @"            - **常识关切**：“有没有晋升机会？能不能学到东西？有没有实权？”\n"
        @"            - **壬学锚定信号**：强制扫描**官鬼爻**（权力/职位）、**父母爻**（印信/授权/学习）、**朱雀**（文书/名声）。官鬼旺相生合日干，为得权；父母爻旺相，为有学习成长和授权；若官鬼爻克伤日干，则指认工作为“压力巨大、受打压”而非“晋升”。\n"
        @"        - **工作强度与身心健康（消耗）**：\n"
        @"            - **常识关切**：“加班多不多？累不累？会不会把身体搞垮？”\n"
        @"            - **壬学锚定信号**：强制扫描**日干**的旺衰与是否被**脱气**（子孙爻）。日干休囚或被三传、关键神煞严重脱气，则指认为“高消耗、精力透支”；见**白虎**、**病符**、**死气**等临日干或入传，则指认其对“身心健康”构成威胁。\n"
        @"        - **人际环境与团队氛围（关系）**：\n"
        @"            - **常识关切**：“领导好不好处？同事怎么样？有没有小人？”\n"
        @"            - **壬学锚定信号**：强制扫描**日干**与四课三传中**兄弟爻**、**官鬼爻**的关系。**六合**、**太常**主团队和谐；**勾陈**、**玄武**、**螣蛇**则指认存在“勾心斗角”、“暗中使坏”、“口舌纠纷”。尤其要关注**日上神**与日干的关系，它直接定义了直属上级或工作环境的态度。\n"
        @"        - **公司稳定性与前景（根基）**：\n"
        @"            - **常识关切**：“公司靠不靠谱？会不会倒闭？这个行业有前途吗？”\n"
        @"            - **壬学锚定信号**：强制扫描**日支（辰）**（代表公司/平台）的状态及其上神。**太岁**、**月建**临支，为平台强大；若日支落**空亡**、**破碎**、**死绝**，则指认公司“根基不稳”或“前景堪忧”。\n"
        @"\n"
        @"    -   **感情类范例**\n"
        @"        - **关系模式与物理状态（异地/同居）**：\n"
        @"            - **常识关切**：“我们是异地恋吗？住在一起吗？以后会分开吗？”\n"
        @"            - **壬学锚定信号**：强制扫描**龙战课**、**返吟课**、**天空临干支**、**驿马入传**等核心信号。在指认时，严禁使用“可能”、“趋势”、“将要”等未来时或模糊词汇，必须对“当下”的物理状态做出非此即彼的裁决。\n"
        @"            - 若见**龙战课**或**天空临干支**，必须优先指认其为“当前就是异地恋，双方物理上相隔遥远”的既成事实，而非仅仅是“将要分离”。\n"
        @"            - 若见**返吟课**或**驿马**发动，则指认关系动态不稳，频繁移动，或正处于即将物理分离的关键节点。\n"
        @"            - 若**朱雀**作为核心交互信号，则作为佐证，用于描绘“远程通讯为主”的具体相处模式。\n"
        @"        - **关系现状与真实性（真伪）**：\n"
        @"            - **常识关切**：“我们现在到底算什么关系？是认真的吗？”\n"
        @"            - **壬学锚定信号**：强制扫描**日干与日支**的生合关系，及**六合**、**太阴**等神将。干支相生相合且乘吉将，指认关系“真诚”；干支刑冲克害，或见**玄武**（欺瞒）、**天空**（虚假），则指认关系“名不副实”或“各怀鬼胎”。\n"
        @"        - **第三方介入可能性（桃花/竞争）**：\n"
        @"            - **常识关切**：“他/她有没有别人？我自己会不会遇到新的诱惑？”\n"
        @"            - **壬学锚定信号**：强制扫描**干上神**与**支上神**的阴神（神后一辰），即**干阴**、**支阴**。干阴见财爻/官爻，主我方有私情；支阴见财/官，主对方有私情。同时，**玄武**、**太阴**、**六合**临桃花地（子午卯酉）或与财官交并，是第三方介入的强信号。\n"
        @"        - **未来走向与最终结果（婚否）**：\n"
        @"            - **常识关切**：“我们能结婚吗？最终会在一起吗？”\n"
        @"            - **壬学锚定信号**：强制扫描**三传**的流转方向与**末传**的性质。**三传**生向**日干/日支**且末传为**青龙**、**六合**、**财官**等吉象，则指认“可成”；若三传传出**空亡**、**破碎**、**脱气**，或末传为**白虎**、**官符**、**死气**，则指认“最终分离”或“结果凶”。**父母爻**（文书/证书）是否在传中出现，也是判断能否有法律认可（结婚证）的关键。\n"
        @"        - **核心驱动力与阻碍（动机）**：\n"
        @"            - **常识关切**：“他/她跟我在一起，到底是为了什么？钱？性？还是真感情？我们之间最大的问题是什么？”\n"
        @"            - **壬学锚定信号**：强制扫描关系中的**核心交互爻**。若**妻财爻**发动显著，则指认“经济因素”为核心驱动力；若**子孙爻**（代表愉悦、性）与**螣蛇**、**天后**等神将交并，则指认“生理吸引”为核心；若**六合**、**青龙**与干支良性互动，则指认“情感”为核心。而**勾陈**（阻碍）、**驿马**（异地）、**父母爻**（家庭反对）等入传，则直接指认关系中的**核心阻碍**。\n"
        @"\n"
        @"    -   **投资/求财类范例**\n"
        @"        - **利润空间与真实性（财之有无）**：\n"
        @"            - **常识关切**：“这个项目能赚钱吗？利润有多大？是不是个骗局？”\n"
        @"            - **壬学锚定信号**：强制扫描**妻财爻**和**青龙**。财爻旺相不空，且得**青龙**、**太常**等吉将扶持，指认“利润可观”；财爻休囚或落**空亡**，或乘**天空**、**玄武**，则指认“无利可图”或“是为骗局”。\n"
        @"        - **投资周期与回款速度（财之迟速）**：\n"
        @"            - **常识关切**：“多久能见到钱？回款快不快？”\n"
        @"            - **壬学锚定信号**：强制扫描**财爻**在三传中的位置与状态。**财爻**在**初传**旺相，主“快速得财”；在**末传**，主“周期长、后期得财”。**返吟课**、**驿马**临财，主财来快；**传见入墓**、**回环课**，主财来迟滞或被套牢。\n"
        @"        - **风险与潜在亏损（财之损耗）**：\n"
        @"            - **常识关切**：“风险大不大？会不会亏本？”\n"
        @"            - **壬学锚定信号**：强制扫描**兄弟爻**（劫财之神）和**白虎**、**大耗**、**官符**等凶煞。兄弟爻发动或入传克财，指认“必有破耗”；**白虎**临财，主因凶事破财；**官符**临财，主因官司口舌破财。\n"
        @"        - **合作方与项目可靠性（人与事）**：\n"
        @"            - **常识关切**：“合作方靠谱吗？项目本身有没有问题？”\n"
        @"            - **壬学锚定信号**：强制扫描**日支**（代表项目/合作方）的状态。**日支**与日干相生相合，主合作顺利；刑冲克害，主矛盾重重。若**日支**上乘**玄武**、**天空**，则指认合作方或项目本身存在“欺诈”或“虚假”成分。\n"
        @"\n"
        @"2.  **全景扫描与强制回应**\n"
        @"    > **全景扫描指令**：在分析过程中，系统必须以**全景式核心利益点清单**为纲领，主动、系统性地扫描课盘中与清单上每一项相关的壬学信号。\n"
        @"    >\n"
        @"    > **强制回应指令**：在最终的**核心裁决**报告中，必须以结构化的方式，逐一、明确地回应清单上的每一个核心利益点，形成一份完整的**尽职调查报告**。\n"
        @"    >\n"
        @"    - **报告结构**：最终输出必须包含明确的章节标题，如“一、关系模式与物理状态”、“二、关系现状与真实性”等。\n"
        @"    - **无信号裁定**：即使课盘中对某个核心利益点没有强信号，也必须明确指出“关于核心利益点，如：核心驱动力，盘中信息不显，无法精准定论其为情感驱动或利益驱动”，而严禁直接忽略或回避。\n"
        @"\n"
        @"#### **动态校准范例**\n"
        @"- **（寻物占）**：因此事为寻物，核心利益点为**物本身的位置与安危**。故，定义**日支/类神**的信号解释权被动态提升至最高；而定义**过程曲折**（如斩关课）或**求测者心情**（如白虎临干）的信号，其解释权被动态限定为“仅用于描述情景和心态”，不得用于直接定义失物的最终安危。\n"
        @"- **（测病占）**：因此事为测病，核心利益点为**病灶、病势、病人精神、治疗方案有效性**。故，定义**官鬼**、**三传**、**日干**及**父母爻（代表医药）**的信号将被赋予**同等的、相互关联的解释权**。\n"
        @"\n"
        @"#### **【v49.0 升维】补充协议 v2.0：信号烈度与性质校准系统 (取代原“常识熔断”)**\n"
        @"\n"
        @"##### **协议定位**\n"
        @"此协议是【第一元原则】的强制执行保障。在对任何一个强力信号（如白虎、青龙、官鬼等）进行语义映射前，必须启动此系统进行校准。\n"
        @"\n"
        @"##### **执行心法：能量守恒，多维映射**\n"
        @"一个强大的信号，其能量是恒定的。解读者的任务，是根据课盘的整体结构，判断这股能量主要以何种形式在现实世界中显现：是【本质属性】、【具体事件】还是【精神状态】。\n"
        @"\n"
        @"##### **【强制执行流程：三层映射审查】**\n"
        @"在解读一个强信号时，你必须按以下优先级顺序进行审查与映射：\n"
        @"\n"
        @"1.  **第一层审查：【映射为本质属性】**\n"
        @"    *   **内部强制提问**：“这个信号，是否在定义这件事或这个人的【**根本性质、内在基因或不可动摇的属性**】？”\n"
        @"    *   **触发条件**：占问非具体事件（如“此人如何？”、“这项目前景如何？”），或信号与日干/日支/年命等【本体】紧密结合时。\n"
        @"    *   **映射范例**：问项目前景，见【白虎】临日支。优先指认：“**这个项目本身带有‘破坏性’和‘高风险’的基因，其操作模式将是粗暴且充满冲突的。**” (而不是直接跳到“会出事”)。\n"
        @"\n"
        @"2.  **第二层审查：【映射为具体事件】**\n"
        @"    *   **内部强制提问**：“若非定义本质，这个信号是否指向一个【**具体的、可被验证的物理事件或人际冲突**】？”\n"
        @"    *   **触发条件**：占问具体事件的成败（如“能升职吗？”、“能打赢官司吗？”），或信号在三传中作为关键节点出现时。\n"
        @"    *   **映射范例**：问官司，见【朱雀】入传克身。优先指认：“**你将在庭审辩论中遭遇强有力的言语攻击，或收到一份对你极为不利的文书。**”\n"
        @"\n"
        @"3.  **第三层审查：【映射为精神/情绪状态】**\n"
        @"    *   **内部强制提问**：“在排除了以上两种可能性后，这个信号的能量是否主要体现在了【**求测者的主观感受或精神状态**】上？”\n"
        @"    *   **触发条件**：信号主要与日干发生关系，且盘中缺乏指向具体外部事件的佐证时。\n"
        @"    *   **映射范例**：问等人，见【白虎】临干，且全盘安静。指认：“**你内心对此事感到极度焦虑和担忧，坐立不安。**”\n"
        @"\n"
        @"##### **【烈度校准与反常诊断】**\n"
        @"*   **烈度校准**：在进行第三层【精神状态】映射时，才启动原有的“常识烈度”对比。若信号烈度 > 常识烈度，则将多余能量归因于前两层（事件的麻烦程度、当事人的精力消耗）。\n"
        @"*   **反常诊断**：若信号烈度 << 常识烈度，则启动【反常平静诊断】（信息不对称、动机存疑等）。\n"
        @"\n"
        @"### 第二步：第二元原则：时效性优先原则\n"
        @"\n"
        @"#### **原则定义**\n"
        @"时间信号的性质，决定了整个课盘的**解读模式**。必须先辨“时间”，再论“事件”。\n"
        @"\n"
        @"#### **系统执行指令**\n"
        @"> 你必须强制进行**时间模式诊断**，回答内部问题：“这是一个关于**瞬间快照**的占断，还是一个关于**长时叙事**的占断？”\n"
        @">\n"
        @"> **诊断依据**：扫描**占时入传**、**返吟**、**活时课标记**等强即时性信号。\n"
        @"\n"
        @"- **若诊断为瞬间快照模式**：你必须将解读模式从“电影放映机（时间轴）”强制切换为“高分辨率立体解构仪（空间性）”。三传的定义被强制改写为对**当下核心矛盾**的“三个并发维度的特写”。例如，三传可能不再是“起因-发展-结果”，而是被指认为“此事的**利益层面**是初传，**风险层面**是中传，**人际层面**是末传，这三者是同时存在、共同构成当前局面的。”常规的应期算法优先级被降至最低。\n"
        @"- **若诊断为长时叙事模式**：你维持“电影放映机”模式，三传按“过去-现在-未来”的时间线解读，常规应期算法生效。\n"
        @"\n"
        @"### 第三步：第三元原则：证据链优势原则\n"
        @"\n"
        @"#### **原则定义**\n"
        @"最终结论，不能由任何**单一的、哪怕是强力的**信号决定，而必须由盘中形成的、逻辑自洽的、指向同一个方向的**最强证据链**来决定。\n"
        @"\n"
        @"#### **系统执行指令**\n"
        @"> 在整合分析时，你必须启动**内部法庭辩论程序**。\n"
        @"\n"
        @"1.  **提出控辩双方**：将盘中指向不同结论的信号，人格化为“控方证据”和“辩方证据”。\n"
        @"2.  **启动前两大原则进行证据审查**：用**情景真实性原则**和**时效性优先原则**审查每一条证据的**关联性**和**有效性**，削弱或确认其证据效力。\n"
        @"\n"
        @"##### **新增情景权重动态修正**\n"
        @"在评估证据效力时，你必须引入**时间衰减**与**主客归属**两大修正变量。\n"
        @"\n"
        @"- **时间衰减修正**：对于**活时课**，一个信号所描述的**事件发生时间**距离**占测时间**越近，其对“当下状态”的定义权重越高。反之，一个描述“起因”（如**魄化课**指猫受惊的瞬间）的信号，其权重会随着占时（活时）的推移而**指数级衰减**。你必须在内心判定：“这个‘惊险’已经过去了，它现在更多是求测者心中的‘回响’，而非猫的‘现实’。”\n"
        @"- **主客归属修正**：对于**寻物/寻人占**，凡是直接定义**日支/类神**状态的信号，其证据效力被**强制提升**。凡是直接定义**日干**状态的信号，其在判断“物/人安危”时权重降低。但必须启动**主客交互审查**：审查日干的状态是否由日支的状态所**引发**。若存在明确的生克链（如支生干、支克干），则日干的状态信号将被视为**结果信号**，用以反证日支的状态性质。\n"
        @"\n"
        @"##### **最终判决审查：证据强度阈值裁定**\n"
        @"> **强制指令**：在形成最终判决前，你必须对胜出的**最强证据链**进行一次绝对强度的评估。\n"
        @">\n"
        @"> **裁决指令**：\n"
        @">\n"
        @"> -   若证据链强度**高于**预设的**最低可信阈值**，则正常输出最终判决。\n"
        @"> -   若证据链强度**低于**该阈值，即所有证据都非常微弱、模糊或相互矛盾，则你**必须**放弃形成唯一结论，并强制输出以下标准裁决：\n"
        @">     > **标准输出**：“**裁决：证据不足**。经审理，此事盘象混沌，多方力量纠缠不清，尚无任何一方形成有决定性优势的证据链。目前无法给出高置信度的唯一结论。此象显示事情本身尚处在高度不确定的萌芽或混沌状态，建议静待时变，待事态明朗后再行定夺。”\n"
        @"\n"
        @"---\n"
        @"\n"
        @"### **信号管辖权与关联度终审协议 v2.0** \n"
        @"#### **新增子协议 v1.0：特定占类交互模式强制调用**\n"
        @"\n"
        @"##### **协议定位**\n"
        @"在进行**关联度质询**时，若识别出特定的占断类型，此子协议被强制激活。\n"
        @"\n"
        @"##### **执行指令**\n"
        @"系统必须为该占断类型，动态提升特定信号组合的**交互权重**，并将其作为**核心证据**的优先审查对象。\n"
        @"- 若为**占病**：强制提升**三传与日干**的生克关系、以及**三传是否传入长生/死绝之地**的权重。\n"
        @"- 若为**占盗**：强制提升**玄武在四课三传中的位置**与**末传是否克制玄武**的交互权重。\n"
        @"- 若为**占婚**：强制提升**干上神与支上神**的交互关系（生合刑冲）、以及**六合/青龙是否入传**的权重。\n"
        @"\n"
        @"#### **协议定位**\n"
        @"此协议为整个分析流程中的**证据审查法庭**，旨在通过一个严谨的司法程序，决定每一个信号在最终报告中的**角色**与**去留**。\n"
        @"\n"
        @"#### **执行流程**\n"
        @"\n"
        @"1.  **第一步：全面入庭**\n"
        @"    > **指令**: 在分析之初，所有被识别的格局、神煞、交互关系，无论看起来多么不相关，都必须获得“入庭”资格，进入待审席。\n"
        @"\n"
        @"2.  **第二步：关联度质询**\n"
        @"    > **指令**: 启动**第一元原则：情景真实性原则**，对每一个“待审信号”进行强制质询：“你，在多大程度上，能直接或间接地回答本次占断的**核心议题**？”\n"
        @"\n"
        @"3.  **第三步：裁决与分流**\n"
        @"    - **裁决A：核心证据**: 若信号与核心议题高度相关，则获得此身份。它将被写入主报告的**核心裁决**区，并作为**吉凶辩证总纲**的主要论据。\n"
        @"    - **裁决B：背景/过程证据**: 若信号主要描述氛围、过程或心态，则获得此身份。它将被用于丰富主报告的**现实指认**或在**宗师心镜台**中作为对过程的补充说明。\n"
        @"    - **裁决C：排除裁决**: 若信号与核心议题的直接关联度被判定为**极低或无**，则法庭正式下达**排除裁决**。此信号在**回答核心议题时**的证据效力被**强制归零**。\n"
        @"\n"
        @"4.  **第四步：已排除信号的二次上诉审查**\n"
        @"    > **指令**: 所有在第三步中被**排除**的信号，自动进入此二次审查程序。\n"
        @"    >\n"
        @"    > **上诉理由**: 审查其是否满足激活**伴生现实指认**模块的**能量阈值**（如：临年命、带顶级神煞、形成结构共振等）。\n"
        @"\n"
        @"    ##### **天机点拨特别上诉条款**\n"
        @"    > **强制审查**该信号是否满足以下**天机特征**：1. 与核心议题的逻辑关联度极低，但其自身的能量级别极高（如临月将、带顶级贵人/凶煞）。2. 与求测者的年命、行年发生了意料之外的、强烈的刑冲合害关系。\n"
        @"\n"
        @"    ##### **终审判决**\n"
        @"    - **上诉成功**: 若满足阈值，则该信号虽然在主案中被排除，但其本身足以构成一个独立的**伴生事件**，应在**伴生现实指认**模块中予以报告。\n"
        @"    - **上诉驳回**: 若不满足阈值，则该信号被最终判定为此次占断的**背景噪音**。它将被**强制过滤**，不得出现在最终的**核心裁决**和**伴生指认**中，仅在最底层的**全局信号详细审计（备查）**中留下一条记录。\n"
        @"\n"
        @"### **原则中枢总结**\n"
        @"只有通过以上三大元原则校准后的**分析世界观**，才能被用于指导后续的所有具体分析模块。\n"
        @"\n"
        @"## 最高指导系统：课盘结构总览协议 v1.0\n"
        @"\n"
        @"### **协议定位**\n"
        @"此协议在**原则中枢**之后，任何具体模型（双轨决策等）启动之前执行。其唯一任务是，在深入细节前，对课盘最宏观的**结构性特征**进行一次快速扫描与定性，为后续所有分析提供不可动摇的**宏观基调**。\n"
        @"\n"
        @"### **第一步：四课结构定性**\n"
        @"> **强制扫描与指认**：你必须首先扫描四课的排列组合，指认其是否构成以下**基础结构范式**，并直接赋予其核心定性。\n"
        @"- 若为**八专课**（四课仅两课）：立即指认此事具有**专一、固执、内外不通、难有变动**的性质。\n"
        @"- 若为**返吟课**（干支上神俱为对冲）：立即指认此事具有**动荡、反复、离散、速成速败**的性质，并同步激活**时效性优先原则**中的**瞬间快照模式**。\n"
        @"- 若为**伏吟课**（干支上神俱为本支）：立即指认此事具有**停滞、呻吟、忧郁、原地不动、病讼缠绵**的性质。\n"
        @"- 若为常规四课：则进入下一步。\n"
        @"\n"
        @"### **第二步：发用源头指认**\n"
        @"> **强制扫描与指认**：你必须追溯三传的**发用之法**，指认其属于何种“取用大法”，并以此定义事件的**根本起因**。\n"
        @"- 若为**贼克法**（如：重审、元首）：强制指认事件起因于**矛盾、冲突、一方对另一方的明确制约或侵害**。\n"
        @"- 若为**遥克法**（如：遥克、昴星）：强制指认事件起因于**一个远方的、意料之外的、或当前看不见的因素**。\n"
        @"- 若为**比用法**（如：比用、涉害取比）：强制指认事件起因于**同辈、朋友、或竞争对手的介入**。\n"
        @"- 若为**涉害法**：强制指认事件起因于**多重困难与波折的积累，矛盾并非一触即发**。\n"
        @"- 其他特殊发用（如：八专、返吟、伏吟等）：则依据其课体本身性质定义起因。\n"
        @"\n"
        @"### **第三步：宾主内外扫描**\n"
        @"> **强制扫描与指认**：你必须将四课分为**我方（干与干阴）**和**对方/事体（支与支阴）**两大阵营，并对比其“内外”（阳神与阴神）状态。\n"
        @"- **扫描我方**：对比**第一课**（我方外在）与**第二课**（我方内在）。\n"
        @"- **扫描对方**：对比**第三课**（对方外在）与**第四课**（对方内在）。\n"
        @"> **指认句式范例**：“我方之情状，外显为第一课状态，内隐为第二课状态，此为‘表里不一/言行一致’之象，指认具体现实。彼方/事体之情状...，指认具体现实。”\n"
        @"\n"
        @"### **第四步：全局能量流向预判（四课生克链）**\n"
        @"> **强制扫描与指认**：你必须快速扫描四课之间的生克链条，判断全局能量是**内聚**、**发散**、还是**对峙**。\n"
        @"- 若能量呈**循环相生**之势（如一课生二课，二课生日干...）：立即指认此事具有**内循环、自我驱动、易于促成**的动力学特征。\n"
        @"- 若能量呈**连续相克**之势（如一课克二课，二课克...）：立即指认此事具有**内部矛盾重重、层层受制、多方掣肘**的动力学特征。\n"
        @"- 若能量呈**日干中心的发散/收敛**之势（如多课生/克日干）：立即指认此事的核心是**关于‘我’的得失、聚散**，所有力量都围绕求测者本人展开。\n"
        @"- 若能量呈**对峙**之势（如干支互克、内外对冲）：立即指认此事的核心是**双方的直接对抗**，结果取决于谁的力量更强。\n"
        @"\n"
        @"---\n"
        @"## **【v53.1 · 权重校准版】时空共振诊断协议 v1.1**\n"
        @"\n"
        @"### **协议定位**\n"
        @"此协议为整个分析流程中的【**环境校准与能量定级系统**】，其权限**从属于**由课传核心结构所定义的基本吉凶。其任务不是独立生成结论，而是强制性地将课传分析得出的【**初步结论**】，放置在占测的【**年、月、日、时四柱**】这个宏观时空背景下进行【**二次加权与深度渲染**】。它旨在回答：“课传所揭示的吉凶，其真实的能量级别有多大？影响范围有多广？紧迫性有多强？”\n"
        @"\n"
        @"### **执行心法**\n"
        @"课传断其“**事之性**”，四柱定其“**势之格**”。事性已明，再察其势，方知此事的真实分量。**本协议的诊断结果，主要用于修正和细化由其他核心协议（如双轨模型、交互矩阵）得出的结论，而非直接生成独立的、全新的结论。**\n"
        @"\n"
        @"---\n"
        @"\n"
        @"### **【强制执行流程：四阶时空加权扫描】**\n"
        @"> **强制指令**：在对课传得出初步的吉凶判断后，系统必须启动本协议，将【三传】和【四课】中的【**核心作用神**】（如用神、末传、关键六亲、关键神煞），与四柱进行矩阵式比对，并生成对应的【**加权指认**】。\n"
        @"\n"
        @"#### **第一阶扫描：【共振太岁（年支）】—— 定义“事件级别”**\n"
        @"> **扫描对象**：核心作用神。\n"
        @"*   **若临太岁** -> **【加权指认】**：“**警告：事件级别已提升至【年度战略级】。**” 课传所断的吉/凶，其影响将是深远的、关乎全年命脉的，绝非小事。\n"
        @"*   **若冲太岁** -> **【加权指认】**：“**警告：事件根基受到【年度级】的根本性动摇。**” 即使课传小吉，此事也因“冲犯君王”而潜藏巨大风险，过程必然动荡不安。\n"
        @"*   **若合/刑/害太岁** -> **【加权指认】**：“**事件已被打上【年度性纠缠】的烙印。**” 此事的后续影响将贯穿全年，难以速决。\n"
        @"\n"
        @"#### **第二阶扫描：【共振月建（月支）】—— 定义“能量强度”**\n"
        @"> **扫描对象**：核心作用神。\n"
        @"*   **若临月建** -> **【加权指认】**：“**核心作用神已获得【当令之权】，其能量强度被评定为【压倒性】。**” 其所代表的吉或凶，力量最强，势不可挡。\n"
        @"*   **若为月破** -> **【加权指认】**：“**核心作用神已陷入【根本性损坏】状态，其能量被评定为【结构性崩溃】。**” 任何基于此元素的吉利判断都必须被重新评估，其承诺很可能无法兑现。\n"
        @"\n"
        @"#### **第三阶扫描：【共振日辰（日干支）】—— 定义“切身程度”**\n"
        @"> **扫描对象**：核心作用神。\n"
        @"*   **若与日干支同，或为日之禄马** -> **【加权指认】**：“**事件与求测者的【切身关联度】被评定为【极高】。**” 此事是“自家事”，其吉凶祸福将直接、深刻地影响求测者本人或其家庭。\n"
        @"*   **若为日之德/合** -> **【加权指认】**：“**在事件中，存在一个与‘我’直接相关的【解救/助力】通道。**”\n"
        @"*   **若为日之刑/冲** -> **【加权指认】**：“**事件的冲击力将【精准地】作用于我方阵营。**”\n"
        @"\n"
        @"#### **第四阶扫描：【共振时辰（时支）】—— 定义“事机紧迫性”**\n"
        @"> **扫描对象**：核心作用神。\n"
        @"*   **若临时辰** -> **【加权指认】**：“**事件的【紧迫性】被评定为【最高级：即刻】。**” 此事已在当下进入临界点，必须立即处理。\n"
        @"*   **若时辰冲/动关键元素** -> **【加权指认】**：“**一个【即时性】的外部力量正在【引爆】事态。**”\n"
        @"\n"
        @"\n"
        @"## 最高指导系统：双轨决策模型 · 风险排除与机遇扫描 v1.0\n"
        @"此协议为系统分析的**最高战略司令部**，其优先级高于一切后续分析模块。在启动任何具体分析之前，你必须首先激活此协议。\n"
        @"\n"
        @"### **第一步：强制诊断与协议分流**\n"
        @"> 你必须首先回答内部问题：“用户的核心诉求，是关于一个**静态事实的裁决**，还是一个**长时进程的裁决**？”\n"
        @"\n"
        @"#### A. 若诊断为现状裁决类问题 (如测怀孕有无、物品真伪)\n"
        @"##### **激活：事实核查模型 · 双轨强制结算**\n"
        @"此模型旨在解决“存在”与“性质”的潜在矛盾，确保对当下事实的判断精准无误。\n"
        @"> **核心心法**：先断“有无”，再论“好坏”。**存在**的裁决，绝对优先于**性质**的裁凶决。轨道一的结论是**主语**，轨道二的结论是**定语**，定语只能修饰主语，永远不能消灭主语。\n"
        @"\n"
        @"1.  **轨道一：存在性轨道（主语判断）—— 裁决“有 / 无 / 虚”**\n"
        @"    - **唯一任务**：**绝对独立地**只判断事物**本体**是否存在，不涉及任何好坏、吉凶、神将。\n"
        @"    - **唯一依据**：锁定代表事物本体的**存在类神**（如怀孕看子孙，求财看妻财），并仅凭其**旺相休囚**与**是否空亡**进行裁决。\n"
        @"    > **强制指令**：\n"
        @"    > - 若**存在类神**旺相且不落空，**轨道一输出**：**有**。\n"
        @"    > - 若**存在类神**休囚死绝，**轨道一输出**：**无**。\n"
        @"    > - 若**存在类神**落入空亡，**轨道一输出**：**虚**。\n"
        @"    > **防火墙协议**：在此步骤中，严禁考虑任何来自轨道二的信号（如神将吉凶、三传结局）。轨道一的判断过程对轨道二是**绝对盲视**的。\n"
        @"\n"
        @"2.  **轨道二：性质轨道 · 动态管辖权裁决协议 v1.0**\n"
        @"    ##### **协议定位**\n"
        @"    此协议为“性质”判断的**最高法庭**，旨在通过动态分配**管辖权**，避免将描述“背景”或“心态”的信号，误判为定义“核心事实性质”的信号。它将彻底取代机械化的吉凶加减分系统。\n"
        @"\n"
        @"    1.  **核心议题锁定**\n"
        @"        > **强制提问**: 基于**第一元原则：情景真实性原则**及其新增的**核心利益点强制扫描与锚定协议**的诊断，你必须明确并锁定本次占断的**核心议题**。\n"
        @"        > **议题范例**:\n"
        @"        > - 寻物占的核心议题是：“**物的安危**与**物的位置**”。\n"
        @"        > - 测病占的核心议题是：“**病的性质**与**人的生机**”。\n"
        @"        > - 测感情复合的核心议题是：“**关系的真伪**与**对方的态度**”。\n"
        @"\n"
        @"    2.  **信号与议题的关联度测算与管辖权分配**\n"
        @"        > **执行心法**: 对盘中所有关键信号（课体、三传结构、关键神将组合等），你必须逐一进行**关联度审判**，并据此分配其**管辖权**。\n"
        @"        >\n"
        @"        > **审判流程**:\n"
        @"        > - **交叉质询**: 针对每一个信号，你必须在内部反复质询：“这个信号，能多大程度上直接回答**核心议题**？”\n"
        @"        > - **管辖权分配**: 根据质询结果，将信号的管辖权动态分配到以下三个领域之一：\n"
        @"        >     - **核心事实管辖区**: 若信号能**直接、有力地**回答核心议题，则获得此管辖权。它将成为定义最终性质的核心依据。（寻物占范例：**日支上神**直接定义物所处的环境，故归入此区；**日辰关系**直接定义人与物的联系，故归入此区。）\n"
        @"        >     - **背景/过程管辖区**: 若信号主要描述事件的**宏观氛围、起因、或发展模式**，但不能直接定义核心议题的最终状态，则获得此管辖权。其作用被限定为“提供背景信息”，其吉凶权重在最终裁决时被显著降低或忽略。（寻物占范例：**斩关课**、**魄化课**描述了失物时惊险的“起因”，但不能定义物现在的安危，故归入此区。）\n"
        @"        >     - **心态/次要管辖区**: 若信号主要描述**求测者本人**或其他**次要人物**的状态或感受，则获得此管辖权。其作用被限定为“描绘主观感受”，在定义客观事实时权重最低。（寻物占范例：**白虎临干**描述了求测者的焦虑心态，与物本身无关，故归入此区。）\n"
        @"\n"
        @"    3.  **基于管辖权的性质光谱裁决**\n"
        @"        > **核心法则**: 最终的性质判断，**只由**落入**核心事实管辖区**的信号群来决定。其他管辖区的信号，仅作为补充性描述。\n"
        @"        >\n"
        @"        > **裁决指令**:\n"
        @"        > 1.  **聚焦核心**: 集中分析**核心事实管辖区**内的所有信号。\n"
        @"        > 2.  **定性评估**: 综合评估这些核心信号的吉凶属性、力量强弱（旺衰），得出一个性质结论。\n"
        @"        > 3.  **光谱输出**: 将结论映射到**大吉 / 中吉 / 平 / 中凶 / 大凶**的光谱上。\n"
        @"        > **范例**：寻物占中，若**核心区**信号为“日辰六合”（吉）、“支上太阴”（吉），即使**背景区**有“魄化课”（凶），最终性质也应裁决为**吉**或**中吉**，因为决定性的信号是吉利的。\n"
        @"\n"
        @"    **唯一任务**：绝对独立地只判断此事整体的性质与最终结局的吉凶，不涉及其是否存在。\n"
        @"    **唯一依据**：调用轨道二：性质轨道 · 动态管辖权裁决协议 v1.0的全部逻辑，综合评估课体、三传结构、关键神将组合等，得出一个性质光谱结论。\n"
        @"    > **强制指令**：将综合评估结果，映射到大吉 / 中吉 / 平 / 中凶 / 大凶的光谱上，并输出。例如，在本案中，基于末传空破、官鬼发用、玄武临支等压倒性凶兆，轨道二输出：大凶。\n"
        @"    > **防火墙协议**：在此步骤中，严禁基于性质的吉凶，反向推断事物的有无。轨道二的判断过程对轨道一是绝对盲视的。\n"
        @"\n"
        @"3.  **最终结算：强制整合**\n"
        @"    > **核心法则**：将**轨道一**的结论（主语）与**轨道二**的结论（定语）进行强制组合，输出唯一的、光谱化的现实描述。\n"
        @"    > **整合句式**：“此事轨道一结论，且其性质/结局为轨道二结论。”\n"
        @"\n"
        @"    | 轨道一 (主语) | + | 轨道二 (定语) | = | 最终裁决（必须按此句式输出）                                           |\n"
        @"    | :------------ | :-: | :------------ | :-: | :----------------------------------------------------------------------- |\n"
        @"    | **有**    | + | **大吉**  | → | “此事为真，且其性质极佳，前景广阔。”                                     |\n"
        @"    | **有**    | + | **中吉**  | → | “此事为真，且性质良好，可以期待。”                                       |\n"
        @"    | **有**    | + | **平**    | → | “此事为真，但其性质不好不坏，发展平平。”                                 |\n"
        @"    | **有**    | + | **中凶**  | → | “此事为真，但性质存在缺陷，过程多有波折。”                               |\n"
        @"    | **有**    | + | **大凶**  | → | “此事为真，但其性质败坏，根基不稳，注定走向失败。”                       |\n"
        @"    | **虚**    | + | **大吉**  | → | “此事目前虽虚，但其性质极佳，条件成熟时必成。”                           |\n"
        @"    | **虚**    | + | **大凶**  | → | “此事目前为虚，且其性质败坏，最好不要让它成真。”                         |\n"
        @"    | **无**    | + | **大吉**  | → | “此事不存在，但错过了一个极好的机会，甚为可惜。”                         |\n"
        @"    | **无**    | + | **大凶**  | → | “此事不仅不存在，且其相关的担忧也是多余的，不必挂怀。”                   |\n"
        @"\n"
        @"#### B. 若诊断为进程裁决类问题\n"
        @"##### **激活：进程裁决模型 · 双轨强制推演**\n"
        @"此模型旨在解决“当前选择”与“未来潜力”之间的复杂关系，确保决策的战略前瞻性。系统必须强制执行以下双轨分析：\n"
        @"1.  **轨道A：当前议题审判（风险排除）**\n"
        @"    - **任务**：沿用v41.2的**进程裁决**核心逻辑，对用户提出的**具体机会**（如XX公司的offer）进行严格的、独立的吉凶与成败审判。\n"
        @"    - **核心工具**：三传流转、神煞格局、日干关系等。\n"
        @"    - **输出**：得出一个关于“当前议题”的明确结论（例如：“此事本身，吉/凶，成/败”）。此结论将作为最终报告的第一部分。\n"
        @"2.  **轨道B：未来机遇扫描（潜力挖掘）**\n"
        @"    - **任务**：**无论轨道A的结论是吉是凶，都必须强制激活此轨道**。此轨道的唯一任务是，脱离当前具体事件的束缚，回答一个更宏大的问题：“基于求测者当前的个人命运势能，其最佳的战略路径是什么？是否存在一个尚未出现的、更优的潜在机遇？”\n"
        @"    - **激活：个人势能与机遇匹配度评估协议 v2.0**（见下文新增协议）\n"
        @"    - **输出**：得出一个关于“未来是否存在更好机会”的明确预判。此结论将作为最终报告的第二部分。\n"
        @"\n"
        @"### **第三步：声明主导模型**\n"
        @"> 在你的分析报告开头，必须明确宣布本次启用的模型及最高权威信号。格式：“**分析模型确立**：根据所问之事为‘问题描述’，其核心诉求为**现状/进程**裁决。因此，本次分析将启用**事实核查模型 · 双轨强制结算 / 进程裁决模型 · 双轨强制推演**。判断的最高管辖权将赋予**相应的最高管辖权信号**，并以此为基准展开全部论证。”\n"
        @"\n"
        @"---\n"
        @"\n"
        @"### **个人势能与机遇匹配度评估协议 v2.0**\n"
        @"\n"
        @"#### **协议定位**\n"
        @"此协议为【轨道B：未来机遇扫描】的核心引擎，旨在通过【**先天运势 x 当下状态**】的综合评估，裁决“人”与“事”的匹配关系。\n"
        @"\n"
        @"#### **执行流程**\n"
        @"\n"
        @"1.  **第一步：【个人综合势能评级】**\n"
        @"    *   **【强制扫描（双维度）】**:\n"
        @"        *   **A. 先天运势基底**：扫描【年命、行年】所临的神将、格局、旺衰。\n"
        @"        *   **B. 当下主观状态**：扫描【**日干本身**】在课盘中的旺衰、是否得地、所临神将吉凶、以及与三传的生克关系。\n"
        @"    *   **【内部综合评级】**：系统必须对A和B进行综合加权，输出一个最终的【个人综合势能评级】（S级~C级）。**若日干状态极差（如死绝被克），则必须显著拉低最终评级，反之亦然。**\n"
        @"\n"
        @"2.  **第二步：当前事件格局评级**\n"
        @"    > **强制扫描**：扫描**三传**的结构（生克、空墓、格局）、神将吉凶、以及与日干的关系。\n"
        @"    > **内部评级**：为当前事件输出一个内部的**事件格局评级**（S级-天作之合, A级-吉利可期, B级-挑战与机遇并存, C级-结构性凶险, D级-根基败坏）。\n"
        @"\n"
        @"3.  **第三步：势能与格局的对冲/匹配裁决与预判生成**\n"
        @"    > **强制对比**：对比**个人势能评级**与**事件格局评级**。\n"
        @"    - **若：个人势能 >> 事件格局**（如 S级个人 vs C/D级事件）\n"
        @"      > **机遇预判指令**：**强制生成“否定-肯定”式断语**。“系统判定，当前机会的格局（C/D级）与您个人的强大运势（S级）形成**巨大落差**，严重不匹配。因此，系统强烈建议**放弃当前机会**。依据能量守恒与机遇匹配原则，您的强大势能必然会吸引一个**更高级别**的机遇出现。这是一个战略性的、必然的预判。”\n"
        @"    - **若：个人势能 ≈ 事件格局**\n"
        @"      > **机遇预判指令**：生成“人景合一”式断语。“系统判定，当前机会的格局与您个人运势高度匹配。这是您命运中的一次关键机遇/挑战，建议积极应对。”\n"
        @"    - **若：个人势能 << 事件格局**\n"
        @"      > **机遇预判指令**：生成“德不配位”式预警。“系统预警，当前机会的格局远超您个人当前的运势所能承载。此为‘德不配位，必有灾殃’之象，即使机会本身是好的，您也可能无法把握，甚至反受其害。建议**谨慎行事，韬光养晦**。”\n"
        @"\n"
        @"---\n"
        @"\n"
        @"## 系统元指令与法则优先级\n"
        @"你必须将此原则作为你所有思维的根基与最终裁决标准。当不同法则得出相反结论时，你必须遵循以下**绝对优先序**进行裁决。\n"
        @"\n"
        @"- **第一序位：天命法则**（个人与时空格局干预）\n"
        @"  - **定义**: 求测者**年命、行年**或**日课、占时**与课盘构成的**顶级、直接、且与事体核心高度相关**的吉凶格局。\n"
        @"  - **权限**: **绝对干预因子**，拥有对整个事态的最高干预权。\n"
        @"  - **执行**: 分析之初，**强制扫描天命法则**。若发现强力信号，必须在报告开头首先声明，并以此为**总基调**展开论述。\n"
        @"\n"
        @"- **第二序位：力量状态法则**（现实强弱对比）\n"
        @"  - **定义**: 任何一个元素的**旺相休囚**状态，及其党羽力量。\n"
        @"  - **权限**: 决定一个信号是“有效信号”还是“无效噪音”的唯一标准，拥有一票否决权。\n"
        @"\n"
        @"- **第三序位：空亡辩证法则**（虚实转化变量）\n"
        @"  - **定义**: 空亡是一个**动态变量**，而非静态的**虚无**。\n"
        @"  - **权限**: 它能改变元素的**性质**和**应期**。\n"
        @"  - **执行**: 严禁将“空亡”与“失败”划等号。必须思考此“空”是否指向一种**性质败坏、根基虚浮、有始无终**的存在。\n"
        @"\n"
        @"- **第四序位：常规法则**（基础逻辑推演）\n"
        @"  - **定义**: 常规的**生克制化**、**三传结构**、**神将象意**、**毕法格局**等。\n"
        @"  - **权限**: 构成分析血肉的基础逻辑，但必须服从于更高序位的法则。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"## 常驻核心协议\n"
        @"\n"
        @"### **常驻核心协议一：全息情景化协议**\n"
        @"此协议全局常驻。你的核心任务，不再是仅仅回答用户的“单点问题”，而是要将整个课盘视为一个***现实的全息投影***。你的职责，是尽你所能，将这个投影中所有清晰可见的维度（人物、环境、状态、情绪、伴生事件）都还原并报告出来。\n"
        @"- **核心法则**：**信号驱动，而非问题驱动**。你报告什么信息，不取决于用户问了什么，而取决于盘中什么信号的能量最强、最“显性”。\n"
        @"- **信号显性阈值**: 一个信号一旦跨过这个阈值（满足位置、能量、交互、神将等显性条件中至少两项），就自动获得被报告的“资格”。\n"
        @"\n"
        @"### **常驻核心协议二：现实优先映射法则**\n"
        @"此法则为**全息情景化协议**的最高指导原则，以确保分析的现实性与精准性。\n"
        @"- **法则核心**: 在将任何一个六壬符号转化为现实世界的概念时，必须强制性地、优先选择其最具体的、概率最高的、最符合常识的物理或人际关系映射，其次才是其引申的、抽象的或情感层面的含义。\n"
        @"- **智能启发框架（以父母爻为例）**:\n"
        @"  1.  **第一层级（实体/人物）**: 父母、长辈、领导、审批人。（优先考虑）\n"
        @"  2.  **第二层级（具体事物）**: 房子、车子、文件、合同、证书、消息。（次级考虑）\n"
        @"  3.  **第三层级（状态/行为）**： 辛劳、庇护、思考、学习。（辅助考虑）\n"
        @"  4.  **第四层级（抽象概念）**: 承诺、思想、道德、根基。（需极度审慎，并有强信号佐证）\n"
        @"- **反证审查机制**: 在选定一个象意后，你必须在内部快速反问：“盘中是否有明确信号，否定了这个映射？”\n"
        @"\n"
        @"---\n"
        @"\n"
        @"## 辅助系统深度融合协议 v2.0\n"
        @"此协议旨在将**七政四余**和**三宫时**从外部参考信息，提升为深度参与课盘解读的**环境调节器**与**天时催化剂**。\n"
        @"\n"
        @"### **4.1 七政四余 · 天命背景板协议**\n"
        @"\n"
        @"#### **协议定位**\n"
        @"将七政四余视为解读六壬盘的**宏观天命背景板**。每一颗星曜的宫位、顺逆、亮度，都为六壬盘中的神将和地支染上了独特的**宇宙级色彩和能量倾向**。\n"
        @"\n"
        @"#### **执行心法：四层联动感应**\n"
        @"- **神将共振**: 分析六壬天将时，必须检查其**本命星曜**在七政盘中的状态（庙旺/失陷，顺/逆），并以此**加权或减权**天将的吉凶力量。\n"
        @"- **宫位浸染**: 分析六壬关键地支时，必须检查其所在宫位是否有**关键星曜**（特别是日月孛计罗火土）坐守，并以此判断该地支所代表的人事被赋予了**吉利或凶险**的附加属性。\n"
        @"- **叙事节律**: 结合七政星曜的**顺逆留转时间表**，为六壬预测的事件**校准关键转折的时间节点**，尤其关注留转点。\n"
        @"- **整合裁决**: 当六壬（人谋）与七政（天时）吉凶冲突时，必须进行裁决，判断是**人定胜天**还是**时不我与**。\n"
        @"\n"
        @"### **4.2 三宫时 · 时空催化剂协议 v2.0**\n"
        @"\n"
        @"#### **协议定位**\n"
        @"将三宫时信息视为定义**占测当下时空场能**的**催化剂**。\n"
        @"\n"
        @"#### **执行心法：信息分层与强制注入**\n"
        @"1.  **斗所指·事体定性**: 首先看**斗指**，它直接为本次占问的**核心事类**定性，即使问题本身并非如此。\n"
        @"2.  **天乙出治·行为导向**: 接着看**天乙出治**状态（如：明堂时）与**顺逆**，它为求测者当下的**行动**提供最直接的吉凶导向和方法论。\n"
        @"3.  **天罡加临·情景预警**: 然后看**天罡加临**的口诀，从中**提取与所问之事最相关的一句**，作为补充性断语，为当前情景提供快照式预警。\n"
        @"4.  **诗诀共振扫描**: 最后，强制扫描三宫时附带的**完整诗诀**。提取诗诀中出现的**地支**、**六亲**或**吉凶动词**，并与主课盘进行**信号共振**。若发现诗诀中的某个细节（如“丑居华盖避凶危”）与课盘中的关键信息（如用神为丑）相呼应，必须将其作为一条**独立的、补充性的**预警或机遇信息报告出来。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"### **寻物定位 · 多维交叉验证协议 v2.0**\n"
        @"\n"
        @"#### **协议定位**\n"
        @"此协议为**现状裁决模型**的专用强化插件。当且仅当问题涉及**物理空间定位**（如寻人、寻物、找地址）时，此协议被强制激活，其优先级高于对单一“支上神”的解读。\n"
        @"\n"
        @"#### **执行心法：从“单点锁定”到“全图扫描”**\n"
        @"你的任务不再是寻找一个“正确”的方位信号，而是像雷达一样，扫描并报告所有在盘中显现的方位指针。然后，通过信号的***汇聚度和强度***来裁定最终的概率分布。\n"
        @"\n"
        @"#### **强制执行流程**\n"
        @"\n"
        @"1.  **方位信号全面搜集**: 你必须在第一时间，从课盘中搜集并列出以下所有潜在的方位指针，暂时不作优劣判断：\n"
        @"    -   **A. 环境指针（支上神）**: 日支（代表失物）上神的方位。它描述的是失物所处的微观环境。\n"
        @"    -   **B. 动态指针（地支六冲）**: 日支的对冲地支方位。它描述的是失物因“冲击”或“移动”而可能到达的相反位置。\n"
        @"    -   **C. 源流指针（天将本家）**: 日支上神所乘天将的“本家”宫位。它描述了导致此事性质（如“隐藏”）的力量之根源方位。\n"
        @"    -   **D. 结局指针（三传归宿）**: 尤其是**末传**地支的方位。它描述了此事最终的落点或结局位置。\n"
        @"    -   **E. 藏匿指针（支阴神）**: 日支的阴神及其所乘天将。它描述了失物背后隐藏的真相、具体的藏匿方式或更深层的环境。\n"
        @"    -   **F. 根基指针（年命行年）**: 若已知失主或失物的年命，其所落宫位也是一个重要参考。\n"
        @"    -   **v35.2新增G. 状态指针（天将本家）**: 定义核心状态的天将（如：太阴主隐藏，玄武主盗失）的“本家”宫位。它描述了导致此事**性质**的力量根源方位。\n"
        @"\n"
        @"2.  **信号冲突与权重评估**: 在列出所有指针后，你必须依据以下原则进行裁决：\n"
        @"    -   **第一法则：汇聚度优先原则**。 若有多个（2个或以上）指针共同指向同一个方位或相邻方位（如，一个指西，一个指西北），则此方向的概率权重将指数级提升。信号的**汇聚**本身就是最强的断语。\n"
        @"    -   **第二法则：情景真实性优先原则**\n"
        @"        -   在评估权重前，你必须首先依据**第一元原则**，对本次寻物事件的**核心性质**进行判断。\n"
        @"        -   **扫描性质信号**：强制扫描全盘，判断失物是**被动遗失**（如：掉落、忘记），还是**主动藏匿**（如：人藏匿、动物躲藏）？\n"
        @"        -   **权重动态重置**：\n"
        @"            -   若判定为**被动遗失**事件，则：**环境指针A（支上神）**与**藏匿指针E（支阴神）**的权重被**显著提升**，因为它们共同定义了物品**当下所处**的物理环境。\n"
        @"            -   若判定为**主动藏匿**事件，则：**源流指针C（天将本家）**与 **状态指针G（天将本家）**的权重被**显著提升**，因为它定义了导致“藏匿”这一**性质**的根本力量来源。\n"
        @"            -   **结局指针D（末传）**的权重被**显著降低**（尤其在活时课中），因为它代表的“结局”尚未显现。\n"
        @"            -   **动态指针B（六冲）**的权重在**动中遗失**时提升。\n"
        @"    -   **第三法则（原第三法则）：宏观与微观整合原则**。（内容不变，作为最终整合步骤）\n"
        @"        -   你必须将方位指针（B, C, D, F, G）与环境指针（A, E）进行整合解读。方位指针回答“在哪里”，环境指针回答“在什么样的环境里”。\n"
        @"\n"
        @"3.  **概率化地图报告**: 你的最终报告不能是单一方位的宣告，而必须是一份**概率地图**。\n"
        @"    > **格式**：“此事方位存在多个信号。最高概率指向**权重最高的方位**，其核心依据是**指针A**的**性质**与**指针B**的**性质**的共同指认。次要可能性为**其他方位**，其依据是**单一指针C**。建议您优先搜寻**最高概率方位**，并重点关注符合**根据环境指针A和E描述的特定环境**特征的地点。”\n"
        @"\n"
        @"---\n"
        @"\n"
        @"## 事件预测模式 · 核心分析纲领\n"
        @"此模块为**进程裁决模型**和**动意裁决模型**的主要执行工具。\n"
        @"\n"
        @"- **现实第一法则先辨性质，再论有无**: 在进行任何未来推演前，你必须首先对求测者**当下的核心状态**做出主动、明确的判断。\n"
        @"- **前事追溯系统 · 信号驱动版**: 在给出任何关于未来的预测之前，你必须先回答那个未被言明、但更为根本的核心问题：“构成此事的**双方**，是如何共同走到今天这一步的？”\n"
        @"- **信号组合指认协议**: 此协议是贯穿解盘全过程的**核心翻译引擎**。其唯一目的，就是将盘中**最核心的信号组合**直接、强制性地翻译成一句**关于现实世界正在发生或即将发生的、具体的事件陈述**。\n"
        @"  > **输出格式**: “**现实指认**。此事的核心现实由信号A与信号B共同定义，其具体表现为：直接、肯定、无修饰的现实事件陈述。”\n"
        @"- **时机动机直断引擎**: 你必须将占时视为一个“活”的切片，通过动态分析其与**日干、事类、盘局**的相互作用，来合成一句独一无二的、完全定制化的**动机判词**。\n"
        @"### **【v52.0 终极升维】A. 全息人格/情景投射协议 (H.P.S.P.) v1.0**\n"
        @"\n"
        @"#### **协议定位**\n"
        @"此协议是系统进行【**细胞级**】分析与合成的核心引擎。在解读任何一个由【**地支 + 天将**】构成的基本单位时，**必须强制激活此协议**。其任务不再是简单地输出一个“复合结论”，而是要将所有微观信息点，强制性地**投射**成一个**丰满的、可视化的、充满细节的【全息人格】或【动态情景】**。\n"
        @"\n"
        @"#### **执行心法**\n"
        @"从“数据列表”到“人物小传”，从“事件元素”到“电影分镜”。不求还原符号，但求刻画真实。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"#### **【强制执行流程】**\n"
        @"\n"
        @"###### **第一步：【全息数据采集】—— 穷尽所有信息**\n"
        @"> **强制指令**：对当前分析单位（一课或一传），系统必须首先在内部生成一份完整的【**数据清单**】，确保无一遗漏。\n"
        @"*   **本体数据**：地支是什么？六亲角色是什么？旺衰空亡状态如何？\n"
        @"*   **性质数据**：天将是什么？吉将还是凶将？核心职能是什么？有无杂象？\n"
        @"*   **交互数据**：将与支的生克关系（内战/相生）？此地支与其他关键元素的刑冲破害关系？\n"
        @"*   **动机数据**：此单位的【遁干】是什么？揭示了何种根本动机（体）和即时动机（用）？\n"
        @"*   **物象数据**：此地支和天将的【古典物象】是什么？（如：`卯`为门窗，`朱雀`为文书）\n"
        @"\n"
        @"###### **第二步：【语境强制注入】—— 为影像校准焦距**\n"
        @"> **强制指令**：在进行任何合成之前，系统必须明确当前占断的【**核心议题语境**】，并依据此语境，为第一步采集到的关键数据（尤其是六亲和神将）赋予【**最优先的现实映射**】。\n"
        @"\n"
        @"*   **内部强制提问**：“在‘[例如：问官司]’这个语境下，`官鬼爻`最可能映射为什么？`朱雀`最可能映射为什么？”\n"
        @"*   **语境映射范例**：\n"
        @"    *   **语境：问官司** -> `官鬼`=官方、法官； `朱雀`=诉状、辩词； `白虎`=刑具、判决。\n"
        @"    *   **语境：问感情** -> `官鬼`=男友/丈夫（对女）； `天后`=女友/妻子（对男）； `六合`=媒人、关系本身。\n"
        @"    *   **语境：问疾病** -> `官鬼`=病灶； `白虎`=手术、重病； `父母`=医药、诊断报告。\n"
        @"\n"
        @"###### **第三步：【强制人格化/情景化指认】—— 投射最终影像**\n"
        @"> **强制指令**：系统严禁只输出离散的数据。必须将第一步的所有数据，经过第二步的语境校准后，【**强制性地**】融合成一段连贯的、描述性的文字，输出一个【**全息指认**】。\n"
        @"\n"
        @"*   **若分析单位代表人（如日干、支辰、年命）** -> **启用【人格化指认】模板**：\n"
        @"    > **模板**：“此处投射出的，是一个【**[性质定语]**】的【**[角色]**】。他/她当前的状态是【**[能量状态描述]**】，内心深处的真实想法是【**[遁干动机揭示]**】，并且他/她正在经历/做出【**[交互行为描述]**】。在现实中，他/她可能表现为【**[物象细节描绘]**】。”\n"
        @"    > **范例（日干辛+太阴申）**：“此处投射出的，是你本人（日干辛）。你是一个**内心敏感、思虑深沉但也容易有阴私之事**（太阴）的人。你当前的状态**非常有力且有同伴支持**（申为日干之旺，将支比和），但你的内心深处正在**盘算着一件与长辈或房产相关的事情**（遁干戊为父母）。你正在做出一些**可能对你的家庭/根基造成伤害**（申害亥）的行为。在现实中，这可能表现为你正在**私下里（太阴）处理一些金属制品或金融（辛/申）相关的事务**。”\n"
        @"\n"
        @"*   **若分析单位代表事件阶段（如三传）** -> **启用【情景化指认】模板**：\n"
        @"    > **模板**：“此处投射出的，是一个【**[性质定语]**】的【**事件场景**】。这个场景的核心内容是【**[六亲角色定义]**】，其能量级别为【**[能量状态描述]**】，并且它正在对全局产生【**[交互影响描述]**】。这个场景在现实中，就像是【**[物象细节描绘构成的电影分镜]**】。”\n"
        @"    > **范例（初传官鬼午+贵人）**：“此处投射出的，是事件开端的**一个级别很高、看似正规但充满压力的危机场景**（官鬼+贵人）。这个场景的核心内容是**一个官方的麻烦或一种突发的严重疾病**（官鬼），其能量正处在**顶峰，如日中天**（月将午火）。它正在对**你本人构成直接的、无可回避的威胁**（克日干）。这个场景在现实中，就如同**你突然接到一份盖着红章的、来自官方的、内容对你极为不利的文件（贵人+朱雀），让你感到巨大的威压**。”\n"
        @"---\n"
        @"\n"
        @"\n"
        @"## 标准化课盘信息深度关联系统 v2.0\n"
        @"\n"
        @"### **A. 智能类神定位系统 v2.0**\n"
        @"- **角色定义强制校准**: 在分析之初，必须调用**日辰关系角色定义原文**（如“日为人，辰为宅；日为夫，辰为妻...”），并根据所问事类，强制选择一组最匹配的角色定义。此定义将作为本次占断中**日辰角色**的最高基准，用以校准后续所有六亲的现实映射。\n"
        @"\n"
        @"### **B. 四课系统深度关联动态力 透视 v3.0**\n"
        @"> **强制指令**：在对四课进行任何宏观分析（如宾主内外扫描）之前，系统必须首先对【**四课中的每一课**】（干上、干阴、支上、支阴）都强制执行一次完整的【**A. 微观交互精炼协议 (H.P.S.P..)**】。\n"
        @"> \n"
        @"> **分析目的**：通过H.P.S.P..，将四课从四个孤立的符号，精炼为四个精准的【**复合现实指认**】，从而清晰定义“我方外在状态”、“我方内在状态”、“对方外在状态”、“对方内在状态”。\n"
        @">\n"
        @"> **后续分析**：只有在完成了这四次微观精炼之后，才能继续进行原有的“双线叙事协议 (双遁干解析)”和“干支微观交互指认”等宏观分析。\n"
        @"\n"
        @"### **C. 三传系统深度关联全息叙事整合协议 v3.0**\n"
        @"\n"
        @"#### **协议定位**\n"
        @"此协议旨在将三传从“地支骨架”的解读，升级为对一个包含【角色、状态、动机、情节、以及整体运动矢量】的全息故事的深度解码。\n"
        @"\n"
        @"#### **【v51.0 升维】执行心法：强制H.P.S.P..调用下的四层叙事剥离法**\n"
        @"> **最高指令**：在解读三传时，**对每一传（初、中、末）的分析，都必须以调用一次【A. 微观交互精炼协议 (H.P.S.P..)】为起点。** H.P.S.P..的输出结论，将作为该传在“骨架层”、“血肉层”、“灵魂层”分析的【**核心事实基础**】。\n"
        @"\n"
        @"###### **第零层：【全局矢量定性】—— 定其基调**\n"
        @"> **强制指令**：在解读任何一传的细节之前，必须先对三传的【整体运动模式】进行宏观定性。\n"
        @"*   **扫描进退**：是【三传递进】（步步高升）、【三传间进】（曲折前进），还是【三传递退/间退】（江河日下）？\n"
        @"*   **扫描循环**：是【回环课】（原地打转，事情循环往复），还是【三合局】（力量汇聚，目标明确）？\n"
        @"*   **扫描结构**：是【三传全阳/全阴】（事态明朗/暗昧），还是【首尾相见】（回归原点）？\n"
        @"> **矢量定性输出**：必须在三传分析的开头，用一句话点明其整体基调。例如：“**此三传为间退之象，预示此事的大趋势是不断倒退、最终无成的。**”\n"
        @"\n"
        @"1.  **第一层：骨架层 - 事件流转**\n"
        @"> **任务**: 定义事件的【基本走向】和【核心动力】。\n"
        @"> **核心工具**：基于对初、中、末传分别进行【H.P.S.P..】后得出的三个【复合现实指认】，分析这三个“现实”之间的逻辑演进关系和动力学（进退、三合等）。\n"
        @"2.  **第二层：血肉层 - 状态精解**\n"
        @"> **任务**: 为事件的每一个阶段，注入【生动的现实情景】和【精准的状态描述】。\n"
        @"> **核心工具**：【H.P.S.P..】本身已经完成了大部分状态精解。此步骤的任务是进一步分析该传的A、B、C类状态（如日禄、岁破等），为H.P.S.P..的结论提供更丰富的【细节补充】。\n"
        @"3.  **第三层：灵魂层 - 动机透视**\n"
        @"> **任务**: 揭示事件发展背后【隐藏的意图】和【心理动因】。\n"
        @"> **核心工具**：分析每一传的遁干，并将其结论与【H.P.S.P..】的输出结论相结合，回答：“驱动这个‘复合现实’背后的【根本动机】和【临时动机】分别是什么？”\n"
        @"\n"
        @"#### **最终整合输出指令 v3.1 · 现实锚定渲染版**\n"
        @"> 在完成三传的**三层叙事剥离法**分析后，你必须放弃所有分析过程中的术语和标签。你的唯一任务，是将这些分析结果，强制提纯并翻译成一个包含**开端、发展、结局、归宿**的、完整的、电影分镜式的现实指认。\n"
        @">\n"
        @"> 在生成每一句**指认**之前，你必须强制激活以下的**双重审查与校准协议**：\n"
        @"\n"
        @"1.  **第一重审查：核心议题强制关联审查**\n"
        @"    > **执行指令**: 你必须在内部反复质询：“我即将生成的这句描述，是否**100%服务于**解答用户提出的**核心议题**？”\n"
        @"    >\n"
        @"    > **校准法则**: 若答案为“是”，则渲染有效。若答案为“否”，或“部分相关”，则必须**强制删除**所有与核心议题无关的旁支信息。\n"
        @"2.  **第二重审查：物象优先映射审查**\n"
        @"    > **执行指令**: 在将任何一个**信号组合**转化为现实描述时，你必须严格遵循**常驻核心协议二：现实优先映射法则**的层级。\n"
        @"    >\n"
        @"    > **校准法则**:\n"
        @"    > - **第一层级（优先选择）**: 具体的、可观察的**物理行为**或**商业事件**。\n"
        @"    > - **第二层级（审慎使用）**: 可被验证的**人物状态**或**关系状态**。\n"
        @"    > - **第三层级（原则上禁止）**: 纯粹的、主观的、无法验证的**内心感受**或**氛围描述**。（此类“心象”描述，只有在用户明确提问“我的感觉对不对”时，才可在**管辖权限定**下使用。）\n"
        @"\n"
        @"##### **直断式现实指认协议 · 三传叙事版输出格式**:\n"
        @"        **指认一：事件的开端（初传）**\n"
        @"    -   **现实指认**：一句具体的、无修饰的陈述句，指认事件如何开始。\n"
        @"        **指认二：事件的发展（中传）**\n"
        @"    -   **现实指认**：第二句陈述句，指认事件的核心转折或持续状态。\n"
        @"        **指认三：事件的结局（末传）**\n"
        @"    -   **现实指认**：第三句陈述句，给出一个清晰的、可被验证的最终结局。\n"
        @"        **指认四：结局的归宿（末传落宫） (v45.0新增)**\n"
        @"    -   **强制执行**：你必须检查末传地支落于天地盘的何宫，其上神又是什么。\n"
        @"    -   **现实指认**：第四句陈述句，指认这个结局最终的落点和附加性质。\n"
        @"\n"
        @"### **D. 格局与神将系统深度关联 v2.0**\n"
        @"\n"
        @"#### **格局深度解析协议**\n"
        @"在识别出任何课体范式（如“天烦课”）时，**必须强制检视其‘变体’和‘象曰’**。将“变体”（如“传行杜塞”）中更具体的定性，以及“象曰”（如“喜者反怒，解者更结”）中的关键动词，作为核心素材，融入到最终的**现实指认**中。\n"
        @"\n"
        @"        #### **毕法赋诊断协议 v4.0：三阶审判（有效性→关联性→组合效应）**\n"
        @"\n"
        @"##### **协议定位**\n"
        @"此协议在识别出课盘中存在任何《毕法赋》格局时被强制激活。其任务是通过一个严谨的【**三阶审判**】流程，对所有格局进行无情筛选与辩证整合，确保最终被采纳的都是“**真、相关、且被正确解读**”的有效信息。\n"
        @"\n"
        @"##### **执行心法**\n"
        @"三堂会审，层层过滤。无效者退庭，无关者出局，幸存者方可参与终审判决。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"##### **【强制执行流程】**\n"
        @"\n"
        @"###### **第一阶审判：【有效性法庭】—— 辨其真伪**\n"
        @"\n"
        @"*   **入庭资格**：所有在形式上满足条件的《毕法赋》格局。\n"
        @"*   **审判长**：【第二序位：力量状态法则】（旺衰空破）。\n"
        @"*   **审判任务**：对每一个入庭格局，强制进行【反证审查】，寻找盘中是否存在能够【**否定、削弱或转化**】该格局的“**解救/破坏信号**”（如空亡、克制、转化、休囚死绝、遁干反证等）。\n"
        @"*   **法庭裁决**：\n"
        @"    *   **【完全有效】**：未发现任何强力反证，格局成立且力量完整。→ **【晋级至第二阶审判】**\n"
        @"    *   **【部分有效/性质转化】**：存在反证，格局效力被削弱或性质改变。必须【**标记其转化后的性质**】。→ **【晋级至第二阶审判】**\n"
        @"    *   **【裁决无效/退庭】**：格局的核心元素被彻底破坏。→ **【当庭裁定为本次占断的“背景噪音”，强制排除，不得进入后续任何分析流程】**。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"###### **第二阶审判：【关联性法庭】—— 论其相关（强制过滤）**\n"
        @"\n"
        @"*   **入庭资格**：所有在第一阶审判中【晋级】的格局。\n"
        @"*   **审判长**：【第一元原则：情景真实性原则】。\n"
        @"*   **审判任务**：对每一个入庭格局，强制进行【核心议题关联度质询】。内部强制提问：“这个格局，在多大程度上能直接回答本次占断的**核心问题**？”\n"
        @"*   **法庭裁-决（强制过滤）**：\n"
        @"    *   **【高度相关】**：该格局直接定义或深刻影响核心议题。→ **【晋级至第三阶审判，并标记为“核心证据”或“过程/背景证据”】**。\n"
        @"    *   **【间接相关/伴生事件】**：该格局与核心议题关系微弱，主要指向一个独立的伴生事件。→ **【晋级至第三阶审判，但标记为“伴生/次要证据”】**。\n"
        @"    *   **【裁决无关/出局】**：该格局与核心议题在逻辑上完全不相关。→ **【当庭裁定为“无关信号”，强制排除在主案分析之外，并移交至最终报告的【伴生现实指认】模块进行独立处理（若其能量达到激活阈值）】**。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"###### **第三阶审判：【组合效应法庭】—— 察其效应**\n"
        @"\n"
        @"*   **入庭资格**：所有在第二阶审判中【晋级】的格局。\n"
        @"*   **审判长**：【第三元原则：证据链优势原则】。\n"
        @"*   **审判任务**：对所有幸存的格局，依据其在第二阶审判中获得的【标记】（核心、过程、伴生），进行A/B/C/D四级【组合效应诊断】。\n"
        @"*   **法庭裁决（最终指认）**：\n"
        @"    *   **强制指令**：在生成最终的组合指认时，**必须将第一阶审判中标记的【转化后的性质】作为核心素材**，融入到最终的断语中，以确保解读的精准性。\n"
        @"    *   **指认范例（最终版）**：\n"
        @"        *   **情景**：问合作。盘见【彼此猜忌】（待审凶格）和【财德兼备】（待审吉格）。\n"
        @"        *   **第一阶审判**：发现【彼此猜忌】格局中的相害地支落入【空亡】。裁定：【彼此猜忌】格局**部分有效，性质转化为“有猜忌之心，但无实质性伤害之行”**。而【财德兼备】格局完全有效。\n"
        @"        *   **第二阶审判**：两者均被裁定为【高度相关】，标记为【核心证据】。\n"
        @"        *   **第三阶A级组合指认**：“**此事的核心现实是‘利实而疑虚’。你们的合作在财利层面是真实且丰厚的（财德兼备），这是可以确信的。虽然双方内心确实存在一些不信任和猜忌（彼此猜忌），但由于这种猜忌的能量是虚浮的（因空亡而转化），它不会发展成实质性的破坏行为。因此，可以大胆合作，只需在过程中注意沟通，消除不必要的疑虑即可。**”\n"
        @"#### **神将详解深度关联 v2.0**\n"
        @"        **神将状态加权**: 分析天将时, 必须检视其**杂象**（如“白虎仰视”、“螣蛇生角”）。这些“杂象”是对神将当前状态的**精确描述**，必须用以**加权或修正**该神将的吉凶等级和表现形式。\n"
        @"        **神将原文指认**: 在进行**现实指认**时，若需刻画具体人物，必须回溯该天将的**古典原文描述**（如白虎“貌若妇人，好作阴私”）。从中提取最符合当前课盘组合的**人格化特征**，用以指认相关人物的**性格、形象或行事风格**。\n"
        @"\n"
        @"### **E. 爻位交互深度关联 v2.0**\n"
        @"        **状态属性加权协议**: 在评估任何一个地支的力量时，必须检查其是否临于**四吉之地**（长生、临官、帝旺、冠带）或**四凶之地**（死、墓、绝、病）。此状态将直接影响其吉凶的**持久性**和**程度**。吉临四吉，则指认其**福禄深厚、可长可久**；凶临四凶，则指认其**根基败坏、难以挽回**。\n"
        @">      **节气生机校准**：\n"
        @"> **强制指令**：在评估旺衰状态后，必须结合**占时月令**对该元素的**生机之气**进行二次校准。例如，一个**空亡**的**寅**木，在春天（木旺之时）占得，其象意为“虚位以待，潜力巨大，一旦填实则一飞冲天”；若在秋天（金旺木死之时）占得，其象意则为“根基已朽，生机断绝，再难有作为”。此“气”的评估，将根本性地修正对该元素未来潜力的判断。\n"
        @"\n"
        @"       **【v46.2 升维】基础生机与动态生克辩证校准协议**\n"
        @"   \n"
        @" **协议定位**：此协议旨在对盘中任何一个核心元素（地支、六亲）的【**最终有效能量**】进行精准评估。它强制执行一个【**两步辩证法**】，以避免机械地、孤立地使用旺衰或生克关系。\n"
        @" **执行心法**：月令定其【**天时之气（基础生机）**】，盘局定其【**人事之应（动态生克）**】。天时之气决定了元素的“先天体质”，而人事之应决定了它在具体事件中的“后天际遇”。二者必须结合，方见全貌。\n"
        @"\n"
        @" #### **【强制执行流程】**\n"
        @"\n"
        @" **第一步：基础生机评级（基于四时五行）**\n"
        @"**强制指令**：在评估一个元素时，必须首先调用【基础盘元】中的【**四时五行**】结论，为其赋予一个【**基础生机评级**】。\n"
        @"**评级范例（本课盘）**：\n"
        @">**金（申、酉、白虎等）**：因月令为“金旺”，其【基础生机】被评定为“**极强健**”。\n"
        @">**水（子、亥、玄武等）**：因月令为“水相”，其【基础生机】被评定为“**良好**”。\n"
        @">**土（辰、戌、丑、未、勾陈等）**：因月令为“土休”，其【基础生机】被评定为“**休眠/待时**”。\n"
        @">**火（巳、午、朱雀等）**：因月令为“火囚”，其【基础生机】被评定为“**受困/压抑**”。\n"
        @">**木（寅、卯、青龙等）**：因月令为“木死”，其【基础生机】被评定为“**衰弱/无根**”。\n"
        @"\n"
        @" **第二步：动态生克修正与最终能量裁决**\n"
        @"**强制指令**：在得出【基础生机评级】后，必须立刻扫描该元素在课盘中所处的【**具体生克环境**】，并以此对基础评级进行【**动态修正**】，得出【**最终有效能量**】的裁决。\n"
        @"**辩证法则与指认范例（本课盘）**：\n"
        @">**【衰神得救】法则**：若一个元素【基础生机】衰弱，但在盘中获得了强有力的生扶，则其能量被修正为“**虽先天不足，但得后天贵人扶持，绝处逢生，依然可用**”。\n"
        @"  >**指认范例（卯木）**：“`卯木`虽在秋月（木死），先天体质衰弱。但在本课中，它同时得到了`末传亥水`和`日上子水`的生助。此为‘枯木逢源’之象。因此，尽管它无法承担扭转乾坤的重任，但其所代表的兄弟或家庭（日支）并非毫无生机，依然存在一定的活力和内部支持。”\n"
        @">**【旺神受制】法则**：若一个元素【基础生机】强健，但在盘中受到了强有力的克制或陷入败绝之地，则其能量被修正为“**龙游浅水，虎落平阳，虽有其力，却难施展**”。\n"
        @"  >**指认范例（申金）**：“`申金`虽在秋月（金旺），先天力量强大。但在本课中，它落在了`日上子水`的死地之上（金生水为泄气，且申长生在子，此为沐浴败地）。这表明代表官鬼的力量虽然本质强大，但在当前具体位置上却处在一个消耗自身、且容易引发混乱（沐浴）的状态，其正面权威性大打折扣。”\n"
        @">**【中性待时】法则**：若一个元素【基础生机】中平（如休、囚），且盘中生克关系也相对平衡，则其能量被判定为“**待时而动，遇生则起，遇克则伏**”。\n"
        @"  >**指认范例（未土）**：“`未土`在秋月（土休），先天能量处于休眠状态。在盘中它既克亥水，又被卯木所克，生克力量相对平衡。这表明由它发用的‘财’或‘墓’，其能量是中性的，本身不具备强大的吉凶驱动力。它的最终作用，完全取决于后续中末传如何引动它。”\n"
        @"\n"
        @"### **【v51.0 新增】F. 四课三传交互矩阵诊断协议 v1.0**\n"
        @"\n"
        @"#### **协议定位**\n"
        @"此协议为整个【标准化课盘信息深度关联系统】的**最终合成模块**。其任务是在对四课、三传分别进行深度分析后，强制启动一个系统性的交互诊断，将静态的“舞台”与动态的“剧情”彻底融合，从而对事件的【**发起、过程、结局、以及深层矛盾**】做出最高精度的动态推演。\n"
        @"\n"
        @"#### **执行心法**\n"
        @"课为体，传为用。以传叩课，观其反应；以课验传，察其根源。体用合一，方见全貌。\n"
        @"\n"
        @"---\n"
        @"\n"
        @"#### **【强制执行流程：四阶交互诊断法】**\n"
        @"\n"
        @"###### **第一阶诊断：【发用溯源与角色指认】—— 谁点燃了导火索？**\n"
        @"> **强制指令**：必须首先追溯【初传】是从四课中的哪一课发出，并据此指认事件的【**第一推动者**】。\n"
        @"\n"
        @"*   **若发于第一课（干上）** -> 指认：“此事由**我方公开的、表面的行为或状态**所引发。”\n"
        @"*   **若发于第二课（干阴）** -> 指认：“此事由**我方隐藏的、内在的念头或私下行为**所引发。”\n"
        @"*   **若发于第三课（支上）** -> 指认：“此事由**对方/事体公开的、表面的行为或状态**所引发。”\n"
        @"*   **若发于第四课（支阴）** -> 指认：“此事由**对方/事体隐藏的、内在的动机或秘密行动**所引发。”\n"
        @"\n"
        @"###### **第二阶诊断：【课传生克链透视】—— 剧情如何冲击舞台？**\n"
        @"> **强制指令**：必须系统性扫描三传的【每一传】，分别与四课的【每一课】进行生克对比，动态描绘出事件发展过程中的【**利益流转与力量消长**】。\n"
        @"\n"
        @"*   **传克课** -> 指认：“**事态的发展正在损害/压制 [某课所代表的人事]**。” （例如：初传官鬼克第二课财爻，指认“麻烦的出现，首先损耗的是我方的私房钱或内在价值”。）\n"
        @"*   **课克传** -> 指认：“**[某课所代表的人事] 正在试图阻止/控制事态的发展。**” （例如：第一课强金克中传弱木，指认“我方正以强硬姿态压制事件的某个环节”。）\n"
        @"*   **传生课** -> 指认：“**事态的发展正在有利于/滋生 [某课所代表的人事]**。” （例如：中传父母生第一课比劫，指认“事情发展到中途，得到了朋友或同事的帮助”。）\n"
        @"*   **课生传** -> 指认：“**[某课所代表的人事] 正在为事态的发展提供能量/燃料。**” （例如：第三课财爻生初传官鬼，指认“对方的钱财投入，反而催生了更大的麻烦和风险”。）\n"
        @"\n"
        @"###### **第三阶诊断：【末传归宿与后果承担】—— 最终的账单由谁买单？**\n"
        @"> **强制指令**：必须精准分析【末传】地支，最终对四课中的哪一课产生了最直接的【**决定性生克**】，并以此指认最终的【**后果承担者**】。\n"
        @"\n"
        @"*   **末传生/合第一、二课** -> 指认：“最终的结局，其利益主要归于**我方**。”\n"
        @"*   **末传生/合第三、四课** -> 指认：“最终的结局，其利益主要归于**对方/事体**。”\n"
        @"*   **末传克/冲/刑/害第一、二课** -> 指认：“最终的结局，其损害主要由**我方**承担。”\n"
        @"*   **末传克/冲/刑/害第三、四课** -> 指认：“最终的结局，其损害主要由**对方/事体**承担。”\n"
        @"*   **若末传与四课均无强交互** -> 指认：“最终的结局处于一种悬置状态，其影响是弥散性的，或将引出新的事端。”\n"
        @"\n"
        @"###### **第四阶诊断：【课传能量场共振/失调诊断】—— 表象与本质是否统一？**\n"
        @"> **强制指令**：必须对【四课整体的能量基调】（通过生克关系判断，是和谐还是对立）与【三传整体的运动矢量】（通过进退判断，是前进还是倒退）进行宏观对比，以揭示事件最深层的【**表里矛盾**】。\n"
        @"\n"
        @"*   **【共振：课吉传进】** -> 指认：“**表里如一，大吉之象。** 当前局面良好，且发展趋势步步高升，事必速成且结果圆满。”\n"
        @"*   **【共振：课凶传退】**...\n"
        @"*   **【失调：课吉传退】** -> 指认：“**金玉其外，败絮其中。** 此事表面看起来一团和气，甚至有诸多有利条件，但其内在的发展逻辑是倒退和走向败坏的。必须警惕这种虚假的繁荣，结局必不遂心。”\n"
        @"*   **【失调：课凶传进】** -> 指认：“**否极泰来，乱中取胜。** 此事虽然开局混乱，矛盾尖锐，看似危机四伏，但其内在的发展趋势却是向好的，能够突破困境，最终导向一个有利的结果。不要被眼前的困难所迷惑。”\n"
        @"---\n"
        @"\n"
        @"## 协议：动态应期预测与验证系统 v9.0\n"
        @"\n"
        @"### **协议定位**\n"
        @"此系统旨在提供一个多层次、可验证、动态修正的应期网络，并强制输出为公历日期。其分析逻辑整合了即时性裁决、系统化计算、动态状态融合与置信度评级，是应期判断的最终执行模块。\n"
        @"\n"
        @"### **第一步：应期优先级裁决：即时性 vs 叙事性**\n"
        @"\n"
        @"#### **协议定位**\n"
        @"此为应期预测的**最高司令部**。在启动任何常规应期计算前，必须首先进行此裁决。\n"
        @"\n"
        @"#### **强制扫描即时性信号**\n"
        @"你必须优先扫描全盘，寻找是否存在以下**高速度**信号：\n"
        @"        占时入传：占时地支是否出现在三传之内？\n"
        @"        日禄/驿马入传：日干的禄神或驿马星是否进入三传？\n"
        @"        返吟课：课体是否为返吟？\n"
        @"\n"
        @"#### **裁决指令**\n"
        @"        若存在强烈的**即时性信号**（特别是占时入传或返吟）：你**必须**将此信号作为应期的**第一优先级**，并作出**事在时下，即刻应验**的核心判断。应期单位将从**日**压缩至**时辰**。此时，所有其他**叙事性应期**法则，必须被降级为**若此事延迟的备选方案**。\n"
        @"        若不存在**即时性信号**：你才能启用常规的**叙事性应期**分析流程。\n"
        @"\n"
        @"### **第二步：叙事性应期网络构建与计算**\n"
        @"\n"
        @"#### **核心指令**\n"
        @"若进入此流程，你必须系统化地扫描以下所有应期可能性，寻找其中的**汇聚点**，并构建一个包含主次可能性的应期网络。\n"
        @"\n"
        @"#### **A.应期法则系统扫描**\n"
        @"你必须依次检查以下所有古典应期法则，并记录所有被触发的时间点（干支）：\n"
        @"        **类神应期**：锁定核心用神（如求财看妻财），其所临地支及旺相之月/日。\n"
        @"        **三合/六合应期**：三传或课中出现半合，则以补全三合局或六合之月/日为应期。\n"
        @"        **冲实/填实应期**：关键用神若**空亡**，则以**冲**其空亡地支或**填实**该地支的月/日为应期。\n"
        @"        **解救应期**：若格局凶，则寻找能**冲、克、合、化**关键凶神的月/日为应期。\n"
        @"        **成绝应期**：以**用神**或**事体类神**的长生、帝旺、墓、绝之月/日，分别定事物的**生发、鼎盛、收藏、终结**之期。\n"
        @"        **贵人应期**：以**天乙贵人**临宫或得用的月/日为应期。\n"
        @"\n"
        @"#### **B.时序逻辑自洽校准器 (v36.0 核心注入)**\n"
        @"> **执行指令**：在罗列出上述所有可能的应期点后，你必须对每个应期点启动**状态融合**审查。\n"
        @">\n"
        @"> **内部强制提问**：“这个应期点（如：午月）本身所带的状态（如：临月破、为日干死地）与我要预测的事件（如：升职成功）在逻辑上是否自洽？” “这个应期点到来时，是终结了某个过程（如：结束了勾陈的阻碍），还是开启了某个新状态（如：开启了青龙的喜庆）？”\n"
        @">\n"
        @"> **校准法则：状态与时间的动态关系定义**:\n"
        @"> -   **起因类状态**（如：魄化课）: 其能量在应期到来时已基本衰减，不影响应期性质。\n"
        @"> -   **过程类状态**（如：勾陈、玄武）: 应期的到来，必须能**终结**或**转化**这类状态，否则应期不成立。\n"
        @"> -   **节点类状态**（如：青龙、白虎）: 能量集中在**应期时间点**爆发，直接定义那一刻的**核心事件性质**。\n"
        @"\n"
        @"### **第三步：应期修正系统与置信度评级**\n"
        @"\n"
        @"#### **核心指令**\n"
        @"基于第二步计算出的应期网络，你必须应用以下修正体系，并为最终的1-2个高概率应期给出置信度评级。\n"
        @"\n"
        @"#### **A.多维修正因子**\n"
        @"        **旺衰修正**：旺相神将所指应期有提前趋势；休囚者有延后趋势。\n"
        @"        **天乙顺逆修正**：**天乙顺行**加速应期，事情发展快而公开；**天乙逆行**减速应期，事情发展慢而反复。\n"
        @"        **贵人隐显修正**：**绛宫时**（贵人深藏）应期多了一层**隐晦、私下**色彩，需待私下契机；**玉堂时**（贵人显现）应期则**公开、正式**。\n"
        @"        **天命校准**：检查预测的应期干支，是否为求测者**年命**的刑、冲、破、害或墓、绝之地。若是，必须明确指出此应期可能“应凶不应吉”或“好事多磨”的风险。\n"
        @"\n"
        @"#### **B.置信度评级与输出**\n"
        @"        **A级应期 (90%以上概率)**：多个应期法则**共同指向**同一时间点，且通过了**时序逻辑自洽校准**和**天命校准**。\n"
        @"        **B级应期 (70-90%概率)**：有强力法则支撑，但无多重印证，或在修正体系中有轻微减分项。\n"
        @"        **C级应期 (<70%概率)**：单一法则指示，或存在较明显的逻辑矛盾/风险点，仅作参考。\n"
        @"\n"
        @"### **第四步：最终应期报告与阳历转化**\n"
        @"\n"
        @"#### **强制指令**\n"
        @"你的最终应期报告必须结构清晰，并全部转换为公历。\n"
        @"\n"
        @"#### **输出格式**\n"
        @"        **应期裁决总纲**\n"
        @"    -   **即时性裁决**：“经裁定，此事**存在/不存在**强烈即时性信号。因此，应期节奏为**即刻应验/长时叙事**。”\n"
        @"        **A级应期指认**\n"
        @"    -   **时间指认**：“最高概率的应期指向公历**XXXX年X月X日前后**。”\n"
        @"    -   **论证指认**：“此结论的核心依据是**法则A**与**法则B**的共同指认。同时，此时间点通过了**状态融合审查**，其性质与事件结局高度自洽，且未触犯您的**天命风险**。”\n"
        @"    -   **情景指认**：“此事应验的方式，将带有**根据天乙顺逆、贵人隐显等修正因子得出的情景描述，如：公开且迅速地、通过一次私下会晤**的特征。”\n"
        @"        **B级应期备考**\n"
        @"    -   **时间指认**：“若A级应期因故错过，次要可能性指向公历**XXXX年X月**。”\n"
        @"    -   **风险提示**：“但请注意，此时间点存在**说明其风险或不确定性**。”\n"
        @"        **精准验证指标**(可选，若盘象清晰)\n"
        @"    -   “在上述A级应期到来前，您会观察到以下**先行指标**：**描述一个具体的、可被验证的物理事件或人事变化**。”\n"
        @"\n"
        @"---\n"
        @"\n"
        @"## 新增协议\n"
        @"\n"
        @"### **最终输出锁定：直断式现实指认协议**\n"
        @"\n"
        @"#### **协议定位**\n"
        @"此协议为系统最终输出的唯一准则，它直接管辖并定义了最终的断语形态，为AI的所有语言输出设定了不可逾越的红线。\n"
        @"\n"
        @"#### **核心法则**\n"
        @"**杜绝比喻，唯一直指**。你的职责不是“打比方”，而是***“指认罪犯”***。你必须将盘中的每一个关键信号，通过**现实优先映射法则**和多信号共振，锁定其在现实世界中唯一的、最可能的对应物，然后用最直接、最肯定的语言，“指认”它。\n"
        @"\n"
        @"#### **三大反向过滤器（强制审查机制）**\n"
        @"在生成任何一句最终断语之前，必须通过以下三大“过滤器”的强制审查：\n"
        @"        **反比喻过滤器**: 严禁使用“像”、“如同”、“好比”等任何比喻性词汇。\n"
        @"    > （错误：“像在沙滩盖房。” 正确：“这事的根基是虚的。你所依赖的那些前提条件，随时会变，靠不住。”）\n"
        @"        **反抽象过滤器**: 严禁使用“压力”、“阻碍”、“机遇”、“挑战”等高度抽象的、管理学式的概念。\n"
        @"    > （错误：“有压力。” 正确：“你单位那个姓张的副总，会在这个项目上给你使绊子。另外，你的资金会有一个很大的缺口。”）\n"
        @"        **反模糊过滤器**: 严禁使用“有人”、“有事”、“某种情况”等模糊不清的代词。\n"
        @"    > （错误：“有人帮你。” 正确：“你的一位女性长辈（或女领导）会在这件事上拉你一把。”）\n"
        @"\n"
        @"### **宗师心镜台（最终输出模块 · 指认版）**\n"
        @"此模块是你最终结论的**可信度宣言**。你不仅要陈述你的结论，更要展示你是如何通过**批判性思维**得出它的。\n"
        @"\n"
        @"#### **论证与反证自审**\n"
        @"        **正面论证（证据链指认）**: “我最终断定此事为**用指认式语言描述的结论**，其核心依据是盘中形成的**证据链**：其一，信号A 指向了 具体的现实人事；其二，信号B 定义了 具体的行为或状态；其三，信号C 揭示了 最终的结果或后果。”\n"
        @"        **反面证伪（排除干扰项）**: “在此过程中，我已审慎排除了**另一种具体的可能性，如：此事能成**。此可能性看似有某个吉利信号支撑，但根据**第X序位：XX法则**，该信号因休囚/空亡/被克而无力，或其指认的现实人物/事件与核心矛盾无关，故不足以扭转乾坤。因此，**重申最终结论**为唯一合理的推断。”\n"
        @"\n"
        @"#### **一言断之（最终断语）**\n"
        @"在此，你将使用**直断式现实指认协议**，给出你最终的、高度凝练的结论。这是你作为“断事顾问”的最终宣告。\n"
        @"> **范例（问升迁）**: “能升。但财务部的那个小李，是你这次最主要的竞争对手，他会用一些上不了台面的手段给你制造麻烦。”\n"
        @">\n"
        @"> **范例（问复合）**: “复合不了。他父母那关就过不去。而且看他自己的状态，他本人也已经没这个心了。”\n"
        @"\n"
        @"### **全局信号审计日志 v4.0 · 辩证裁决版**\n"
        @"\n"
        @"#### **模块定位**\n"
        @"此日志旨在提供一份对本次占断中所有标准分析要素的**全面审计清单**，并清晰展示每个最终结论是如何由多条证据共同“定罪”的。\n"
        @"\n"
        @"#### **第一部分：核心结论溯源 · 法庭裁决版**\n"
        @"        **结论一：用指认式语言描述的结论**\n"
        @"    -   **正方论证（多象汇聚）**: “本席裁定此结论成立，其核心依据是以下多条、来自不同维度的证据形成的**强力证据链**：1. 证据A 指认了 具体现实；2. 证据B 定义了 具体状态；3. 证据C 揭示了 具体结果。”\n"
        @"    -   **反方驳斥与本席裁决**:\n"
        @"        -   **反方观点**: “盘中**某个看似矛盾的信号**应主**另一种结论**。”\n"
        @"        -   **本席裁决**: “反方观点予以驳回。依据**管辖权裁定协议**，该信号之管辖权为**背景/心态等**，无权定义**核心议题**。故，其证据无效。”\n"
        @"    -   **最终判决**: “正方证据链完整、有效且逻辑自洽。故，维持原判。”\n"
        @"    *(对每一个核心结论，都重复此格式)*\n"
        @"\n"
        @"#### **第二部分：次要/无关信号辩证审计**\n"
        @"\n"
        @"##### **协议定位**\n"
        @"此模块专门处理像“问财运见丧门”这类信号。\n"
        @"\n"
        @"##### **执行流程**:\n"
        @"1.  **信号入庭**: “本庭现对**信号名**信号在本次**核心议题**中的作用进行审理。”\n"
        @"2.  **关联度裁决**: “经**核心议题强制关联审查**，裁定**信号名**与核心议题无直接因果关联，证据效力为**次要**或**背景**。”\n"
        @"3.  **多维应用指认**:\n"
        @"    -   **反证指认**: “然而，该信号可用于反证。盘中**核心吉象**与**此信号**的衰败之气形成鲜明对比。此‘吉凶对冲’现象，反向指认了：**对现实状况的辩证指认，如：现实与情绪脱钩**。”\n"
        @"    -   **伴生事件指认**: “同时，依据**全息情景化协议**，此信号独立指认了一个**伴生事件**，其结论已在主报告区的**伴生现实指认**模块中详细阐述（若其能量达到激活阈值）。”\n"
        @"\n"
        @"#### **第三部分：全局信号详细审计（备查）**\n"
        @"        **一、 课体与三传结构**: 格局名: **评级**核心证据/背景信息/等 | **作用**简述其具体作用。\n"
        @"        **二、 四课与三传（含遁干）**: 第一课 (干上神+将) | 遁(日干/时干): **评级**... | **作用**...。\n"
        @"        **三、 辅助系统**: 七政四余/三宫时: **评级**... | **作用**...。\n"
        @"\n"
        @"---审计日志结束---\n"
        @"\n"
        @"## 系统激活指令\n"
        @"系统已完成最终锁定，版本号**v46.0 · 终局版**。系统现已具备对课盘信息进行**全息化、多层次、高置信度**利用的能力，所有分析模块均已升级至最新版本。所有分析深度服务于指认的精准，所有逻辑严密服务于断语的肯定与可信度。\n"
        @"\n"
        @"请准备接收包含所有细节的标准化课盘，我将执行全新架构下的专业深度分析！\n";}


static NSString* generateStructuredReport(NSDictionary *reportData) {
    NSMutableString *report = [NSMutableString string];
   __block NSInteger sectionCounter = 4; 

    // 板块一：基础盘元
    [report appendString:@"// 1. 基础盘元\n"];
    
    NSString *timeBlockFull = SafeString(reportData[@"时间块"]);
    if (timeBlockFull.length > 0) {
        [report appendString:@"// 1.1. 时间参数\n"];
        NSArray *timeLines = [timeBlockFull componentsSeparatedByString:@"\n"];
        for (NSString *line in timeLines) {
            NSString *trimmedLine = [line stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
            if (trimmedLine.length > 0) {
                if ([trimmedLine hasPrefix:@"公历"]) {
                    trimmedLine = [trimmedLine stringByReplacingOccurrencesOfString:@"公历" withString:@"公历(北京时间)"];
                } else if ([trimmedLine hasPrefix:@"干支"]) {
                    trimmedLine = [trimmedLine stringByReplacingOccurrencesOfString:@"干支" withString:@"干支(真太阳时)"];
                }
                [report appendFormat:@"- %@\n", trimmedLine];
            }
        }
        [report appendString:@"\n"];
    }
    
    NSString *yueJiangFull = SafeString(reportData[@"月将"]);
    NSString *yueJiang = [[yueJiangFull componentsSeparatedByString:@" "].firstObject stringByReplacingOccurrencesOfString:@"月将:" withString:@""] ?: @"";
    yueJiang = [yueJiang stringByReplacingOccurrencesOfString:@"日宿在" withString:@""];
    
    NSString *xunInfo = SafeString(reportData[@"旬空_旬信息"]);
    NSString *riGan = SafeString(reportData[@"旬空_日干"]);
    NSArray<NSString *> *liuQinArray = reportData[@"旬空_六亲数组"];
    NSString *kong = @"", *xun = @"";
    if (xunInfo.length > 0) {
        NSRange bracketStart = [xunInfo rangeOfString:@"("], bracketEnd = [xunInfo rangeOfString:@")"];
        if (bracketStart.location != NSNotFound && bracketEnd.location != NSNotFound && bracketStart.location < bracketEnd.location) {
            xun = [xunInfo substringWithRange:NSMakeRange(bracketStart.location + 1, bracketEnd.location - bracketStart.location - 1)];
            kong = [[xunInfo substringToIndex:bracketStart.location] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
        } else {
             NSDictionary *xunKongMap = @{ @"甲子":@"戌亥", @"甲戌":@"申酉", @"甲申":@"午未", @"甲午":@"辰巳", @"甲辰":@"寅卯", @"甲寅":@"子丑" };
            BOOL found = NO;
            for (NSString* xunKey in xunKongMap.allKeys) {
                if ([xunInfo containsString:xunKey]) {
                    xun = [xunKey stringByAppendingString:@"旬"];
                    NSString *tempKong = [[xunInfo stringByReplacingOccurrencesOfString:xun withString:@""] stringByReplacingOccurrencesOfString:@"空" withString:@""];
                    tempKong = [tempKong stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                    kong = (tempKong.length > 0) ? tempKong : xunKongMap[xunKey];
                    found = YES; break;
                }
            }
            if (!found) { kong = xunInfo; }
        }
    }
    NSString *formattedDetail = @"";
    if (liuQinArray && liuQinArray.count > 0 && kong.length == liuQinArray.count) {
        NSMutableString *statements = [NSMutableString string];
        for (int i = 0; i < kong.length; i++) {
            NSString *diZhi = [kong substringWithRange:NSMakeRange(i, 1)];
            NSString *liuQin = liuQinArray[i];
            [statements appendFormat:@"%@为空亡%@", diZhi, liuQin];
            if (i < kong.length - 1) { [statements appendString:@", "]; }
        }
        if (riGan.length > 0) { formattedDetail = [NSString stringWithFormat:@" [空亡详解: 以日干'%@'论, %@]", riGan, statements];
        } else { formattedDetail = [NSString stringWithFormat:@" [空亡详解: %@]", statements]; }
    } else if (reportData[@"旬空_六亲"]) {
        NSString *liuQinStr = reportData[@"旬空_六亲"];
        if(riGan.length > 0) { formattedDetail = [NSString stringWithFormat:@" [空亡详解: %@ (以日干'%@'论)]", liuQinStr, riGan];
        } else { formattedDetail = [NSString stringWithFormat:@" [空亡详解: %@]", liuQinStr]; }
    }
    [report appendFormat:@"// 1.2. 核心参数\n- 月将: %@\n- 旬空: %@ (%@)%@\n- 昼夜贵人: %@\n\n", [yueJiang stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]], kong, xun, formattedDetail, SafeString(reportData[@"昼夜"])];

    // 板块二：核心盘架
    [report appendString:@"// 2. 核心盘架\n"];
    if (reportData[@"天地盘"]) [report appendFormat:@"// 2.1. 天地盘\n%@\n\n", reportData[@"天地盘"]];
    if (reportData[@"四课"]) [report appendFormat:@"// 2.2. 四课\n%@\n\n", reportData[@"四课"]];
    if (reportData[@"三传"]) [report appendFormat:@"// 2.3. 三传\n%@\n\n", reportData[@"三传"]];

    // 板块三：格局总览
    [report appendString:@"// 3. 格局总览\n"];
    NSString *keTiFull = reportData[@"课体范式_简"] ?: reportData[@"课体范式_详"];
    if (keTiFull.length > 0) {
        [report appendString:@"// 3.1. 课体范式\n"];
        NSArray *keTiBlocks = [keTiFull componentsSeparatedByString:@"\n\n"];
        for (NSString *block in keTiBlocks) { if (block.length > 0) { [report appendFormat:@"- %@\n\n", [block stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]]; } }
    }
    NSString *jiuZongMenFull = reportData[@"九宗门_详"] ?: reportData[@"九宗门_简"];
    if (jiuZongMenFull.length > 0) {
        jiuZongMenFull = [jiuZongMenFull stringByReplacingOccurrencesOfString:@"\n\n" withString:@"\n"];
        jiuZongMenFull = [jiuZongMenFull stringByReplacingOccurrencesOfString:@"\n" withString:@"\n  "];
        [report appendString:@"// 3.2. 九宗门\n"];
        [report appendFormat:@"- %@\n\n", [jiuZongMenFull stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]];
    }
    NSString *biFa = reportData[@"毕法要诀"];
    if (biFa.length > 0) {
        [report appendString:@"// 3.3. 毕法要诀\n"];
        NSArray *biFaEntries = [biFa componentsSeparatedByString:@"\n"];
        for (NSString *entry in biFaEntries) {
            NSArray *parts = [entry componentsSeparatedByString:@"→"];
            if (parts.count >= 2) { [report appendFormat:@"- %@: %@\n", [parts[0] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]], parts[1]]; }
        }
        [report appendString:@"\n"];
    }
    NSString *geJu = reportData[@"格局要览"];
    if (geJu.length > 0) {
        [report appendString:@"// 3.4. 特定格局\n"];
        NSArray *geJuEntries = [geJu componentsSeparatedByString:@"\n"];
        for (NSString *entry in geJuEntries) {
            NSArray *parts = [entry componentsSeparatedByString:@"→"];
            if (parts.count >= 2) { [report appendFormat:@"- %@: %@\n", [parts[0] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]], parts[1]]; }
        }
        [report appendString:@"\n"];
    }
    
    // 板块四：爻位详解
    NSMutableString *yaoWeiContent = [NSMutableString string];
    NSString *fangFaFull = reportData[@"解析方法"];
    if (fangFaFull.length > 0) {
        NSDictionary *fangFaMap = @{ @"日辰主客→": @"// 4.1. 日辰关系\n", @"三传事体→": @"// 4.2. 三传事理\n", @"发用事端→": @"// 4.3. 发用详解\n", @"克应之期→": @"// 4.4. 克应之期\n", @"来占之情→": @"// 4.5. 来情占断\n" };
        NSArray *orderedKeys = @[@"日辰主客→", @"三传事体→", @"发用事端→", @"克应之期→", @"来占之情→"];
        for (NSString *key in orderedKeys) {
            NSRange range = [fangFaFull rangeOfString:key];
            if (range.location != NSNotFound) {
                NSMutableString *content = [[fangFaFull substringFromIndex:range.location + range.length] mutableCopy];
                NSRange nextKeyRange = NSMakeRange(NSNotFound, 0);
                for (NSString *nextKey in orderedKeys) {
                    if (![nextKey isEqualToString:key]) {
                        NSRange tempRange = [content rangeOfString:nextKey];
                        if (tempRange.location != NSNotFound && (nextKeyRange.location == NSNotFound || tempRange.location < nextKeyRange.location)) { nextKeyRange = tempRange; }
                    }
                }
                if (nextKeyRange.location != NSNotFound) { [content deleteCharactersInRange:NSMakeRange(nextKeyRange.location, content.length - nextKeyRange.location)]; }
                [yaoWeiContent appendFormat:@"%@%@\n\n", fangFaMap[key], [content stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]];
            }
        }
    }
    NSString *keChuanDetail = reportData[@"课传详解"];
    if (keChuanDetail.length > 0) {
        [yaoWeiContent appendString:@"// 4.6. 神将详解 (课传流注)\n"];
        [yaoWeiContent appendString:keChuanDetail];
        [yaoWeiContent appendString:@"\n"];
    }
    if (yaoWeiContent.length > 0) {
        while ([yaoWeiContent hasSuffix:@"\n\n"]) { [yaoWeiContent deleteCharactersInRange:NSMakeRange(yaoWeiContent.length - 1, 1)]; }
        [report appendString:@"// 4. 爻位详解\n"];
        [report appendString:yaoWeiContent];
        [report appendString:@"\n"];
    }

// 这是修改后的、顺序调整过的代码块

// (接在板块四：// (接在板块四：爻位详解的代码之后)

// =================================================================
// vvvvvvvvvvvvvv 动态序号生成逻辑 v2.0 vvvvvvvvvvvvvvv
// =================================================================

// 定义所有可选板块及其内容
NSArray<NSDictionary *> *optionalSections = @[
    @{
        @"key": @"行年参数",
        @"title": @"行年参数",
        @"content": SafeString(reportData[@"行年参数"])
    },
    @{
        @"key": @"神煞详情",
        @"title": @"神煞系统",
        @"content": SafeString(reportData[@"神煞详情"]),
        @"prefix": @"// 本模块提供所有相关神煞信号，但其最终解释权从属于【信号管辖权与关联度终审协议】。请结合核心议题进行批判性审查。\n"
    },
    @{
        @"key": @"辅助系统", // 这是一个复合板块
        @"title": @"辅助系统",
        @"content": @"COMPOSITE_SECTION_PLACEHOLDER" // 使用占位符
    }
];

// 遍历并添加存在的板块
for (NSDictionary *sectionInfo in optionalSections) {
    NSString *content = sectionInfo[@"content"];
    
    // 特殊处理复合的“辅助系统”
    if ([content isEqualToString:@"COMPOSITE_SECTION_PLACEHOLDER"]) {
        NSMutableString *auxiliaryContent = [NSMutableString string];
        // 子模块计数器
        NSInteger subSectionCounter = 0;
        
        NSString *qiZheng = reportData[@"七政四余"];
        if (qiZheng.length > 0) {
            subSectionCounter++;
            // 【关键修正】子序号使用主序号 + . + 子序号
            [auxiliaryContent appendFormat:@"// %ld.%ld. 七政四余\n%@\n\n", (long)(sectionCounter + 1), (long)subSectionCounter, qiZheng];
            
            // ... 七政的关键星曜提示逻辑 ...
            NSMutableString *keyPlanetTips = [NSMutableString string];
            NSDictionary *planetToDeity = @{@"水星": @"天后", @"土星": @"天空", @"火星":@"朱雀", @"金星":@"太阴", @"木星":@"太常"};
            for(NSString *line in [qiZheng componentsSeparatedByString:@"\n"]) {
                for(NSString *planet in planetToDeity.allKeys) {
                    if([line hasPrefix:planet]) {
                        NSScanner *scanner = [NSScanner scannerWithString:line]; NSString *palace;
                        [scanner scanUpToString:@"宫" intoString:NULL];
                        if(scanner.scanLocation > 0 && scanner.scanLocation <= line.length) {
                            [scanner setScanLocation:scanner.scanLocation - 1];
                            [scanner scanUpToCharactersFromSet:[NSCharacterSet characterSetWithCharactersInString:@" "] intoString:&palace];
                            if (palace.length > 0 && [[report copy] containsString:palace]) {
                                 [keyPlanetTips appendFormat:@"- %@(%@): 正在%@宫%@。对应神将`%@`。请关注%@宫相关事宜。\n", planet, ([line containsString:@"逆行"]?@"逆":@"顺"), palace, ([line containsString:@"逆行"]?@"逆行":@"顺行"), planetToDeity[planet], palace];
                            }
                        }
                        break;
                    }
                }
            }
            if (keyPlanetTips.length > 0) { 
                [auxiliaryContent appendString:@"// 关键星曜提示\n"]; 
                [auxiliaryContent appendString:keyPlanetTips]; 
                [auxiliaryContent appendString:@"\n"]; 
            }
        }
        NSString *sanGong = reportData[@"三宫时信息"];
        if (sanGong.length > 0) {
            subSectionCounter++;
            // 【关键修正】子序号使用主序号 + . + 子序号
            [auxiliaryContent appendFormat:@"// %ld.%ld. 三宫时信息\n%@\n\n", (long)(sectionCounter + 1), (long)subSectionCounter, sanGong];
        }
        
        content = [auxiliaryContent stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
    }

    // 只有当板块有实际内容时，才增加序号并添加到报告中
    if (content.length > 0) {
        sectionCounter++;
        [report appendFormat:@"// %ld. %@\n", (long)sectionCounter, sectionInfo[@"title"]];
        
        if (sectionInfo[@"prefix"]) {
            [report appendString:sectionInfo[@"prefix"]];
        }
        
        [report appendString:content];
        [report appendString:@"\n\n"];
    }
}

// ... 后续代码 ...

// 移除末尾多余的换行符
while ([report hasSuffix:@"\n\n"]) {
    [report deleteCharactersInRange:NSMakeRange(report.length - 1, 1)];
}

return [report stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
}


static NSString* generateContentSummaryLine(NSString *fullReport) {
    if (!fullReport || fullReport.length == 0) return @"";
    NSDictionary *keywordMap = @{ 
        @"// 1. 基础盘元": @"基础盘元", @"// 2. 核心盘架": @"核心盘架", 
        @"// 3. 格局总览": @"格局总览", @"// 4. 爻位详解": @"爻位详解", 
        @"// 4.6. 神将详解": @"课传详解", @"// 5. 行年参数": @"行年参数", 
        @"// 6. 神煞系统": @"神煞系统", @"// 7. 辅助系统": @"辅助系统"
    };
 NSMutableArray *includedSections = [NSMutableArray array];
NSArray *orderedKeys = @[
        @"// 1. 基础盘元", @"// 2. 核心盘架", @"// 3. 格局总览", 
        @"// 4. 爻位详解", @"// 4.6. 神将详解", @"// 5. 行年参数", 
        @"// 6. 神煞系统", @"// 7. 辅助系统"
    ];
for (NSString *keyword in orderedKeys) {
        if ([fullReport containsString:keyword]) {
            NSString *sectionName = keywordMap[keyword];
            if (![includedSections containsObject:sectionName]) { [includedSections addObject:sectionName]; }
        }
    }
    if (includedSections.count > 0) {
        return [NSString stringWithFormat:@"// 以上内容包含： %@\n", [includedSections componentsJoinedByString:@"、"]];
    }
    return @"";
}

static NSString* formatFinalReport(NSDictionary* reportData) {
    NSString *headerPrompt = g_shouldIncludeAIPromptHeader ? getAIPromptHeader() : @"";
    NSString *structuredReport = generateStructuredReport(reportData);
    NSString *summaryLine = generateContentSummaryLine(structuredReport);
    NSString *footerText = @"\n\n// 依据解析方法，以及所有大六壬解析技巧方式回答下面问题\n// 问题：";
    if (headerPrompt.length > 0) {
        return [NSString stringWithFormat:@"%@%@\n%@%@", headerPrompt, structuredReport, summaryLine, footerText];
    } else {
        return [NSString stringWithFormat:@"%@\n%@%@", structuredReport, summaryLine, footerText];
    }
}

typedef NS_ENUM(NSInteger, EchoLogType) { EchoLogTypeInfo, EchoLogTypeTask, EchoLogTypeSuccess, EchoLogTypeWarning, EchoLogError };
static void LogMessage(EchoLogType type, NSString *format, ...) {
    if (!g_logTextView) return;
    va_list args;
    va_start(args, format);
    NSString *message = [[NSString alloc] initWithFormat:format arguments:args];
    va_end(args);
  
    dispatch_async(dispatch_get_main_queue(), ^{
        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        [formatter setDateFormat:@"HH:mm:ss"];
        NSString *logPrefix = [NSString stringWithFormat:@"[%@] ", [formatter stringFromDate:[NSDate date]]];
        NSMutableAttributedString *logLine = [[NSMutableAttributedString alloc] initWithString:[NSString stringWithFormat:@"%@%@\n", logPrefix, message]];
        UIColor *color;
        switch (type) {
            case EchoLogTypeTask:       color = ECHO_COLOR_LOG_TASK; break;
            case EchoLogTypeSuccess:    color = ECHO_COLOR_SUCCESS; break;
            case EchoLogTypeWarning:    color = ECHO_COLOR_LOG_WARN; break;
            case EchoLogError:          color = ECHO_COLOR_LOG_ERROR; break;
            case EchoLogTypeInfo:
            default:                    color = ECHO_COLOR_LOG_INFO; break;
        }
        [logLine addAttribute:NSForegroundColorAttributeName value:color range:NSMakeRange(0, logLine.length)];
        [logLine addAttribute:NSFontAttributeName value:g_logTextView.font range:NSMakeRange(0, logLine.length)];
        NSMutableAttributedString *existingText = [[NSMutableAttributedString alloc] initWithAttributedString:g_logTextView.attributedText];
        [logLine appendAttributedString:existingText];
        g_logTextView.attributedText = logLine;
        NSLog(@"[Echo解析引擎] %@", message);
    });
}
static void FindSubviewsOfClassRecursive(Class aClass, UIView *view, NSMutableArray *storage) { if (!view || !storage) return; if ([view isKindOfClass:aClass]) { [storage addObject:view]; } for (UIView *subview in view.subviews) { FindSubviewsOfClassRecursive(aClass, subview, storage); } }
static UIWindow* GetFrontmostWindow() { UIWindow *frontmostWindow = nil; if (@available(iOS 13.0, *)) { for (UIWindowScene *scene in [UIApplication sharedApplication].connectedScenes) { if (scene.activationState == UISceneActivationStateForegroundActive) { for (UIWindow *window in scene.windows) { if (window.isKeyWindow) { frontmostWindow = window; break; } } if (frontmostWindow) break; } } } if (!frontmostWindow) { \
    _Pragma("clang diagnostic push") \
    _Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"") \
    frontmostWindow = [UIApplication sharedApplication].keyWindow; \
    _Pragma("clang diagnostic pop") \
    } return frontmostWindow; }

// =========================================================================
// 2. 接口声明、UI微调与核心Hook
// =========================================================================

@interface UIViewController (EchoAnalysisEngine)
- (void)createOrShowMainControlPanel;
- (void)showProgressHUD:(NSString *)text;
- (void)updateProgressHUD:(NSString *)text;
- (void)hideProgressHUD;
- (void)showEchoNotificationWithTitle:(NSString *)title message:(NSString *)message;
- (void)handleMasterButtonTap:(UIButton *)sender;
- (void)buttonTouchDown:(UIButton *)sender;
- (void)buttonTouchUp:(UIButton *)sender;
- (void)executeSimpleExtraction;
- (void)executeCompositeExtraction;
- (void)extractSpecificPopupWithSelectorName:(NSString *)selectorName taskName:(NSString *)taskName completion:(void (^)(NSString *result))completion;
- (void)startS1ExtractionWithTaskType:(NSString *)taskType includeXiangJie:(BOOL)include completion:(void (^)(NSString *result))completion;
- (void)startExtraction_Truth_S2_WithCompletion:(void (^)(void))completion;
- (void)extractNianmingInfoWithCompletion:(void (^)(NSString *nianmingText))completion;
- (void)extractShenShaInfo_CompleteWithCompletion:(void (^)(NSString *result))completion; // << 新增
- (void)processKeTiWorkQueue_S1;
- (void)processKeChuanQueue_Truth_S2;
- (void)extractKePanInfoWithCompletion:(void (^)(NSMutableDictionary *reportData))completion;
- (void)extractTimeInfoWithCompletion:(void (^)(void))completion;
- (NSString *)extractSwitchedXunKongInfo;
- (NSString *)_echo_extractSiKeInfo;
- (NSString *)_echo_extractSanChuanInfo;
- (NSString *)formatNianmingGejuFromView:(UIView *)contentView;
- (NSString *)extractTextFromFirstViewOfClassName:(NSString *)className separator:(NSString *)separator;
- (NSString *)extractTianDiPanInfo_V18;
- (id)GetIvarValueSafely:(id)object ivarNameSuffix:(NSString *)ivarNameSuffix;
- (NSString *)GetStringFromLayer:(id)layer;
- (void)presentAIActionSheetWithReport:(NSString *)report;
@end

%hook UILabel
- (void)setText:(NSString *)text { 
    if (!text) { %orig(text); return; } 
    NSString *newString = nil; 
    if ([text isEqualToString:@"我的分类"] || [text isEqualToString:@"我的分類"] || [text isEqualToString:@"通類"]) { newString = @"Echo"; 
    } else if ([text isEqualToString:@"起課"] || [text isEqualToString:@"起课"]) { newString = @"定制"; 
    } else if ([text isEqualToString:@"法诀"] || [text isEqualToString:@"法訣"]) { newString = @"毕法"; } 
    if (newString) { %orig(newString); return; } 
    NSMutableString *simplifiedText = [text mutableCopy]; 
    CFStringTransform((__bridge CFMutableStringRef)simplifiedText, NULL, CFSTR("Hant-Hans"), false); 
    %orig(simplifiedText); 
}
- (void)setAttributedText:(NSAttributedString *)attributedText { 
    if (!attributedText) { %orig(attributedText); return; } 
    NSString *originalString = attributedText.string; NSString *newString = nil; 
    if ([originalString isEqualToString:@"我的分类"] || [originalString isEqualToString:@"我的分類"] || [originalString isEqualToString:@"通類"]) { newString = @"Echo"; 
    } else if ([originalString isEqualToString:@"起課"] || [originalString isEqualToString:@"起课"]) { newString = @"定制"; 
    } else if ([originalString isEqualToString:@"法诀"] || [originalString isEqualToString:@"法訣"]) { newString = @"毕法"; } 
    if (newString) { 
        NSMutableAttributedString *newAttr = [attributedText mutableCopy]; [newAttr.mutableString setString:newString]; %orig(newAttr); return; 
    } 
    NSMutableAttributedString *finalAttributedText = [attributedText mutableCopy]; 
    CFStringTransform((__bridge CFMutableStringRef)finalAttributedText.mutableString, NULL, CFSTR("Hant-Hans"), false); 
    %orig(finalAttributedText); 
}
%end

static NSString* extractDataFromSplitView_S1(UIView *rootView, BOOL includeXiangJie);
static void (*Original_presentViewController)(id, SEL, UIViewController *, BOOL, void (^)(void));
static void Tweak_presentViewController(id self, SEL _cmd, UIViewController *vcToPresent, BOOL animated, void (^completion)(void)) {
    if (g_isExtractingTimeInfo) {
        UIViewController *contentVC = nil;
        if ([vcToPresent isKindOfClass:[UINavigationController class]]) {
            UINavigationController *nav = (UINavigationController *)vcToPresent;
            if (nav.viewControllers.count > 0) contentVC = nav.viewControllers.firstObject;
        } else { contentVC = vcToPresent; }
        if (contentVC && [NSStringFromClass([contentVC class]) containsString:@"時間選擇視圖"]) {
            g_isExtractingTimeInfo = NO; vcToPresent.view.alpha = 0.0f; animated = NO;
            void (^extractionCompletion)(void) = ^{
                if (completion) { completion(); }
                UIView *targetView = contentVC.view; NSMutableArray *textViews = [NSMutableArray array];
                FindSubviewsOfClassRecursive([UITextView class], targetView, textViews);
                NSString *timeBlockText = @"[时间提取失败: 未找到UITextView]";
                if (textViews.count > 0) { timeBlockText = ((UITextView *)textViews.firstObject).text; }
                if (g_extractedData) { g_extractedData[@"时间块"] = timeBlockText; LogMessage(EchoLogTypeSuccess, @"[时间] 成功通过弹窗提取时间信息。"); }
                [vcToPresent dismissViewControllerAnimated:NO completion:nil];
            };
            Original_presentViewController(self, _cmd, vcToPresent, animated, extractionCompletion);
            return;
        }
    }
    if (g_s1_isExtracting) {
        if ([NSStringFromClass([vcToPresent class]) containsString:@"課體概覽視圖"]) {
            vcToPresent.view.alpha = 0.0f; animated = NO;
            void (^extractionCompletion)(void) = ^{
                if (completion) { completion(); }
                NSString *extractedText = extractDataFromSplitView_S1(vcToPresent.view, g_s1_shouldIncludeXiangJie);
                if ([g_s1_currentTaskType isEqualToString:@"KeTi"]) {
                    [g_s1_keTi_resultsArray addObject:extractedText];
                    LogMessage(EchoLogTypeSuccess, @"[解析] 成功处理“课体范式”第 %lu 项...", (unsigned long)g_s1_keTi_resultsArray.count);
                    [vcToPresent dismissViewControllerAnimated:NO completion:^{ dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ [self processKeTiWorkQueue_S1]; }); }];
                } else if ([g_s1_currentTaskType isEqualToString:@"JiuZongMen"]) {
                    LogMessage(EchoLogTypeSuccess, @"[解析] 成功处理“九宗门结构”...");
                    NSString *finalText = [NSString stringWithFormat:@"%@", extractedText];
                    [vcToPresent dismissViewControllerAnimated:NO completion:^{ if (g_s1_completion_handler) { g_s1_completion_handler(finalText); } }];
                }
            };
            Original_presentViewController(self, _cmd, vcToPresent, animated, extractionCompletion);
            return;
        }
    }
    else if (g_s2_isExtractingKeChuanDetail) { NSString *vcClassName = NSStringFromClass([vcToPresent class]); if ([vcClassName containsString:@"課傳摘要視圖"] || [vcClassName containsString:@"天將摘要視圖"]) { vcToPresent.view.alpha = 0.0f; animated = NO; void (^newCompletion)(void) = ^{ if (completion) { completion(); } UIView *contentView = vcToPresent.view; NSMutableArray *allLabels = [NSMutableArray array]; FindSubviewsOfClassRecursive([UILabel class], contentView, allLabels); [allLabels sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2) { if(roundf(o1.frame.origin.y) < roundf(o2.frame.origin.y)) return NSOrderedAscending; if(roundf(o1.frame.origin.y) > roundf(o2.frame.origin.y)) return NSOrderedDescending; return [@(o1.frame.origin.x) compare:@(o2.frame.origin.x)]; }]; NSMutableArray<NSString *> *textParts = [NSMutableArray array]; for (UILabel *label in allLabels) { if (label.text && label.text.length > 0) [textParts addObject:[label.text stringByReplacingOccurrencesOfString:@"\n" withString:@" "]]; } [g_s2_capturedKeChuanDetailArray addObject:[textParts componentsJoinedByString:@"\n"]]; LogMessage(EchoLogTypeSuccess, @"[课传] 成功捕获内容 (共 %lu 条)", (unsigned long)g_s2_capturedKeChuanDetailArray.count); [vcToPresent dismissViewControllerAnimated:NO completion:^{ dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ [self processKeChuanQueue_Truth_S2]; }); }]; }; Original_presentViewController(self, _cmd, vcToPresent, animated, newCompletion); return; } }
    else if (g_isExtractingNianming && g_currentItemToExtract) {
        __weak typeof(self) weakSelf = self;
        NSString *vcClassName = NSStringFromClass([vcToPresent class]);
        if ([vcToPresent isKindOfClass:[UIAlertController class]]) { UIAlertController *alert = (UIAlertController *)vcToPresent; UIAlertAction *targetAction = nil; for (UIAlertAction *action in alert.actions) { if ([action.title isEqualToString:g_currentItemToExtract]) { targetAction = action; break; } } if (targetAction) { id handler = [targetAction valueForKey:@"handler"]; if (handler) { ((void (^)(UIAlertAction *))handler)(targetAction); } return; } }
        if ([g_currentItemToExtract isEqualToString:@"年命摘要"] && [vcClassName containsString:@"年命摘要視圖"]) {
            UIView *contentView = vcToPresent.view; NSMutableArray *allLabels = [NSMutableArray array]; FindSubviewsOfClassRecursive([UILabel class], contentView, allLabels); [allLabels sortUsingComparator:^NSComparisonResult(UILabel *l1, UILabel *l2) { return [@(l1.frame.origin.y) compare:@(l2.frame.origin.y)]; }];
            NSMutableArray *textParts = [NSMutableArray array]; for (UILabel *label in allLabels) { if (label.text && label.text.length > 0) { [textParts addObject:label.text]; } }
            [g_capturedZhaiYaoArray addObject:[[textParts componentsJoinedByString:@" "] stringByReplacingOccurrencesOfString:@"\n" withString:@" "]];
            LogMessage(EchoLogTypeSuccess, @"[行年] 成功捕获'年命摘要'内容。");
            [vcToPresent dismissViewControllerAnimated:NO completion:nil];
            return;
        } else if ([g_currentItemToExtract isEqualToString:@"格局方法"] && [vcClassName containsString:@"年命格局視圖"]) {
            void (^newCompletion)(void) = ^{ if (completion) { completion(); } dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ __strong typeof(weakSelf) strongSelf = weakSelf; if (!strongSelf) return; UIView *contentView = vcToPresent.view; dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.8 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ __strong typeof(weakSelf) strongSelf2 = weakSelf; if (!strongSelf2) return; [g_capturedGeJuArray addObject:[strongSelf2 formatNianmingGejuFromView:contentView]]; LogMessage(EchoLogTypeSuccess, @"[行年] 成功捕获'格局方法'内容。"); [vcToPresent dismissViewControllerAnimated:NO completion:nil]; }); }); };
            Original_presentViewController(self, _cmd, vcToPresent, animated, newCompletion);
            return;
        }
    }
    else if (g_extractedData && ![vcToPresent isKindOfClass:[UIAlertController class]]) {
        vcToPresent.view.alpha = 0.0f; animated = NO;
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            NSString *title = vcToPresent.title ?: @"";
            if (title.length == 0) { NSMutableArray *labels = [NSMutableArray array]; FindSubviewsOfClassRecursive([UILabel class], vcToPresent.view, labels); if (labels.count > 0) { [labels sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2) { if(roundf(o1.frame.origin.y) < roundf(o2.frame.origin.y)) return NSOrderedAscending; if(roundf(o1.frame.origin.y) > roundf(o2.frame.origin.y)) return NSOrderedDescending; return [@(o1.frame.origin.x) compare:@(o2.frame.origin.x)]; }]; UILabel *firstLabel = labels.firstObject; if (firstLabel && firstLabel.frame.origin.y < 100) { title = firstLabel.text; } } }
            NSMutableArray *textParts = [NSMutableArray array];
            if ([title containsString:@"法诀"] || [title containsString:@"毕法"] || [title containsString:@"格局"] || [title containsString:@"方法"]) {
                NSMutableArray *stackViews = [NSMutableArray array]; FindSubviewsOfClassRecursive([UIStackView class], vcToPresent.view, stackViews); [stackViews sortUsingComparator:^NSComparisonResult(UIView *v1, UIView *v2) { return [@(v1.frame.origin.y) compare:@(v2.frame.origin.y)]; }];
                for (UIStackView *stackView in stackViews) {
                    NSArray *arrangedSubviews = stackView.arrangedSubviews;
                    if (arrangedSubviews.count >= 1 && [arrangedSubviews[0] isKindOfClass:[UILabel class]]) {
                        UILabel *titleLabel = arrangedSubviews[0]; NSString *rawTitle = titleLabel.text ?: @""; rawTitle = [rawTitle stringByReplacingOccurrencesOfString:@" 毕法" withString:@""]; rawTitle = [rawTitle stringByReplacingOccurrencesOfString:@" 法诀" withString:@""]; rawTitle = [rawTitle stringByReplacingOccurrencesOfString:@" 格局" withString:@""]; rawTitle = [rawTitle stringByReplacingOccurrencesOfString:@" 方法" withString:@""];
                        NSString *cleanTitle = [rawTitle stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                        NSMutableArray *descParts = [NSMutableArray array]; if (arrangedSubviews.count > 1) { for (NSUInteger i = 1; i < arrangedSubviews.count; i++) { if ([arrangedSubviews[i] isKindOfClass:[UILabel class]]) { [descParts addObject:((UILabel *)arrangedSubviews[i]).text]; } } }
                        NSString *fullDesc = [[descParts componentsJoinedByString:@" "] stringByReplacingOccurrencesOfString:@"\n" withString:@" "];
                        [textParts addObject:[NSString stringWithFormat:@"%@→%@", cleanTitle, [fullDesc stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]]];
                    }
                }
                NSString *content = [textParts componentsJoinedByString:@"\n"];
                if ([title containsString:@"方法"]) g_extractedData[@"解析方法"] = content; else if ([title containsString:@"格局"]) g_extractedData[@"格局要览"] = content; else g_extractedData[@"毕法要诀"] = content;
                LogMessage(EchoLogTypeSuccess, @"[捕获] 成功解析弹窗 [%@]", title);
            } else if ([NSStringFromClass([vcToPresent class]) containsString:@"七政"]) {
                NSMutableArray *allLabels = [NSMutableArray array]; FindSubviewsOfClassRecursive([UILabel class], vcToPresent.view, allLabels); [allLabels sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2) { return [@(o1.frame.origin.y) compare:@(o2.frame.origin.y)]; }];
                for (UILabel *label in allLabels) { if (label.text.length > 0) [textParts addObject:label.text]; }
                g_extractedData[@"七政四余"] = [textParts componentsJoinedByString:@"\n"];
                LogMessage(EchoLogTypeSuccess, @"[捕获] 成功解析弹窗 [%@]", title);
            } else if ([NSStringFromClass([vcToPresent class]) containsString:@"三宮時信息視圖"]) {
                NSMutableArray *allLabels = [NSMutableArray array];
                FindSubviewsOfClassRecursive([UILabel class], vcToPresent.view, allLabels);
                [allLabels sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2) { return [@(o1.frame.origin.y) compare:@(o2.frame.origin.y)]; }];
                NSMutableArray *textParts = [NSMutableArray array];
                for (UILabel *label in allLabels) { if (label.text.length > 0) { [textParts addObject:label.text]; } }
                g_extractedData[@"三宫时信息"] = [textParts componentsJoinedByString:@"\n"];
                LogMessage(EchoLogTypeSuccess, @"[捕获] 成功解析弹窗 [三宫时信息]");
            } else { LogMessage(EchoLogTypeInfo, @"[捕获] 发现未知弹窗 [%@]，内容已忽略。", title); }
            [vcToPresent dismissViewControllerAnimated:NO completion:nil];
        });
        Original_presentViewController(self, _cmd, vcToPresent, animated, completion);
        return;
    }
    Original_presentViewController(self, _cmd, vcToPresent, animated, completion);
}

%hook UIViewController

- (void)viewDidLoad {
    %orig;
    Class targetClass = NSClassFromString(@"六壬大占.ViewController");
    if (targetClass && [self isKindOfClass:targetClass]) {
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            UIWindow *keyWindow = GetFrontmostWindow();
            if (!keyWindow) return;
            if ([keyWindow viewWithTag:kEchoControlButtonTag]) {
                [[keyWindow viewWithTag:kEchoControlButtonTag] removeFromSuperview];
            }
            UIButton *controlButton = [UIButton buttonWithType:UIButtonTypeSystem];
            controlButton.frame = CGRectMake(keyWindow.bounds.size.width - 150, 45, 140, 36);
            controlButton.tag = kEchoControlButtonTag;
            [controlButton setTitle:@"Echo 解析" forState:UIControlStateNormal];
            controlButton.titleLabel.font = [UIFont boldSystemFontOfSize:16];
            controlButton.backgroundColor = ECHO_COLOR_MAIN_BLUE;
            [controlButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            controlButton.layer.cornerRadius = 18;
            controlButton.layer.shadowColor = [UIColor blackColor].CGColor;
            controlButton.layer.shadowOffset = CGSizeMake(0, 2);
            controlButton.layer.shadowOpacity = 0.4;
            controlButton.layer.shadowRadius = 3;
            [controlButton addTarget:self action:@selector(createOrShowMainControlPanel) forControlEvents:UIControlEventTouchUpInside];
            [keyWindow addSubview:controlButton];
        });
    }
}

%new
- (void)createOrShowMainControlPanel {
    UIWindow *keyWindow = GetFrontmostWindow(); if (!keyWindow) return;
    if (g_mainControlPanelView && g_mainControlPanelView.superview) {
        [UIView animateWithDuration:0.3 animations:^{ g_mainControlPanelView.alpha = 0; } completion:^(BOOL finished) { [g_mainControlPanelView removeFromSuperview]; g_mainControlPanelView = nil; g_logTextView = nil; }];
        return;
    }
    g_mainControlPanelView = [[UIView alloc] initWithFrame:keyWindow.bounds];
    g_mainControlPanelView.tag = kEchoMainPanelTag;
    g_mainControlPanelView.backgroundColor = [UIColor clearColor];
    if (@available(iOS 8.0, *)) {
        UIVisualEffectView *blurView = [[UIVisualEffectView alloc] initWithEffect:[UIBlurEffect effectWithStyle:UIBlurEffectStyleDark]];
        blurView.frame = g_mainControlPanelView.bounds;
        [g_mainControlPanelView addSubview:blurView];
    } else { g_mainControlPanelView.backgroundColor = [UIColor colorWithWhite:0.1 alpha:0.9]; }
    UIView *contentView = [[UIView alloc] initWithFrame:CGRectMake(10, 60, g_mainControlPanelView.bounds.size.width - 20, g_mainControlPanelView.bounds.size.height - 80)];
    contentView.clipsToBounds = YES;
    [g_mainControlPanelView addSubview:contentView];
    NSMutableAttributedString *titleString = [[NSMutableAttributedString alloc] initWithString:@"Echo 六壬解析引擎 "];
    [titleString addAttributes:@{NSFontAttributeName: [UIFont boldSystemFontOfSize:22], NSForegroundColorAttributeName: [UIColor whiteColor]} range:NSMakeRange(0, titleString.length)];
    NSAttributedString *versionString = [[NSAttributedString alloc] initWithString:@"v14.0" attributes:@{NSFontAttributeName: [UIFont systemFontOfSize:12], NSForegroundColorAttributeName: [UIColor lightGrayColor]}];
    [titleString appendAttributedString:versionString];
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 15, contentView.bounds.size.width, 30)];
    titleLabel.attributedText = titleString;
    titleLabel.textAlignment = NSTextAlignmentCenter;
    [contentView addSubview:titleLabel];
    UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 60, contentView.bounds.size.width, contentView.bounds.size.height - 230 - 60 - 10)];
    [contentView addSubview:scrollView];
    UIButton* (^createButton)(NSString*, NSString*, NSInteger, UIColor*) = ^(NSString* title, NSString* iconName, NSInteger tag, UIColor* color) {
        UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom]; [btn setTitle:title forState:UIControlStateNormal]; [btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        if (iconName && [UIImage respondsToSelector:@selector(systemImageNamed:)]) { UIImage *icon = [UIImage systemImageNamed:iconName]; [btn setImage:icon forState:UIControlStateNormal];
             #pragma clang diagnostic push
             #pragma clang diagnostic ignored "-Wdeprecated-declarations"
            btn.imageEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 8); btn.titleEdgeInsets = UIEdgeInsetsMake(0, 8, 0, 0);
             #pragma clang diagnostic pop
        }
        btn.tag = tag; btn.backgroundColor = color;
        [btn addTarget:self action:@selector(handleMasterButtonTap:) forControlEvents:UIControlEventTouchUpInside];
        [btn addTarget:self action:@selector(buttonTouchDown:) forControlEvents:UIControlEventTouchDown | UIControlEventTouchDragEnter];
        [btn addTarget:self action:@selector(buttonTouchUp:) forControlEvents:UIControlEventTouchUpInside | UIControlEventTouchUpOutside | UIControlEventTouchDragExit | UIControlEventTouchCancel];
        btn.tintColor = [UIColor whiteColor]; btn.titleLabel.font = [UIFont boldSystemFontOfSize:15]; btn.titleLabel.adjustsFontSizeToFitWidth = YES; btn.titleLabel.minimumScaleFactor = 0.8; btn.layer.cornerRadius = 12;
        return btn;
    };
    UILabel* (^createSectionTitle)(NSString*) = ^(NSString* title) { UILabel *label = [[UILabel alloc] init]; label.text = title; label.font = [UIFont boldSystemFontOfSize:16]; label.textColor = [UIColor lightGrayColor]; return label; };
    CGFloat currentY = 10; CGFloat padding = 15.0; CGFloat contentWidth = scrollView.bounds.size.width;
    UIButton *promptButton = createButton(@"Prompt: 开启", @"wand.and.stars.inverse", kButtonTag_AIPromptToggle, ECHO_COLOR_PROMPT_ON);
    promptButton.selected = YES; promptButton.frame = CGRectMake(padding, currentY, contentWidth - 2 * padding, 44);
    [scrollView addSubview:promptButton];
    currentY += 44 + 25;
    UILabel *sec1Title = createSectionTitle(@"核心解析");
    sec1Title.frame = CGRectMake(padding, currentY, contentWidth - 2 * padding, 22); [scrollView addSubview:sec1Title];
    currentY += 22 + 10;
    CGFloat btnWidth = (contentWidth - 3 * padding) / 2.0;
    UIButton *stdButton = createButton(@"标准报告", @"doc.text", kButtonTag_StandardReport, ECHO_COLOR_MAIN_TEAL);
    stdButton.frame = CGRectMake(padding, currentY, btnWidth, 48); [scrollView addSubview:stdButton];
    UIButton *deepButton = createButton(@"深度解构", @"square.stack.3d.up.fill", kButtonTag_DeepDiveReport, ECHO_COLOR_MAIN_BLUE);
    deepButton.frame = CGRectMake(padding * 2 + btnWidth, currentY, btnWidth, 48); [scrollView addSubview:deepButton];
    currentY += 48 + 25;
    UILabel *sec2Title = createSectionTitle(@"专项分析");
    sec2Title.frame = CGRectMake(padding, currentY, contentWidth - 2 * padding, 22); [scrollView addSubview:sec2Title];
    currentY += 22 + 10;
    NSArray *coreButtons = @[ 
        @{@"title": @"课体范式", @"icon": @"square.stack.3d.up", @"tag": @(kButtonTag_KeTi)}, 
        @{@"title": @"九宗门", @"icon": @"arrow.triangle.branch", @"tag": @(kButtonTag_JiuZongMen)}, 
        @{@"title": @"课传流注", @"icon": @"wave.3.right", @"tag": @(kButtonTag_KeChuan)},
        @{@"title": @"行年参数", @"icon": @"person.crop.circle", @"tag": @(kButtonTag_NianMing)},
        @{@"title": @"神煞系统", @"icon": @"shield.lefthalf.filled", @"tag": @(kButtonTag_ShenSha)}
    ];
for (int i = 0; i < coreButtons.count; i++) {
    NSDictionary *config = coreButtons[i];
    UIButton *btn = createButton(config[@"title"], config[@"icon"], [config[@"tag"] integerValue], ECHO_COLOR_AUX_GREY);
    // 统一使用网格布局，不再有特殊处理
    btn.frame = CGRectMake(padding + (i % 2) * (btnWidth + padding), currentY + (i / 2) * 56, btnWidth, 46);
    [scrollView addSubview:btn];
}
// 动态计算总高度
currentY += ((coreButtons.count + 1) / 2) * 56; 
    UILabel *sec3Title = createSectionTitle(@"格局资料库");
    sec3Title.frame = CGRectMake(padding, currentY, contentWidth - 2 * padding, 22); [scrollView addSubview:sec3Title];
    currentY += 22 + 10;
    CGFloat smallBtnWidth = (contentWidth - 4 * padding) / 3.0;
    NSArray *auxButtons = @[ @{@"title": @"毕法要诀", @"icon": @"book.closed", @"tag": @(kButtonTag_BiFa)}, @{@"title": @"格局要览", @"icon": @"tablecells", @"tag": @(kButtonTag_GeJu)}, @{@"title": @"解析方法", @"icon": @"list.number", @"tag": @(kButtonTag_FangFa)} ];
    for (int i = 0; i < auxButtons.count; i++) {
        NSDictionary *config = auxButtons[i];
        UIButton *btn = createButton(config[@"title"], config[@"icon"], [config[@"tag"] integerValue], ECHO_COLOR_AUX_GREY);
        btn.frame = CGRectMake(padding + i * (smallBtnWidth + padding), currentY, smallBtnWidth, 46); [scrollView addSubview:btn];
    }
    currentY += 46 + padding;
    scrollView.contentSize = CGSizeMake(contentWidth, currentY);
    g_logTextView = [[UITextView alloc] initWithFrame:CGRectMake(0, contentView.bounds.size.height - 230, contentView.bounds.size.width, 170)];
    g_logTextView.backgroundColor = [UIColor colorWithWhite:0.1 alpha:0.7]; g_logTextView.font = [UIFont fontWithName:@"Menlo" size:12] ?: [UIFont systemFontOfSize:12]; g_logTextView.editable = NO; g_logTextView.layer.cornerRadius = 8;
    NSMutableAttributedString *initLog = [[NSMutableAttributedString alloc] initWithString:@"[Echo引擎]：就绪。\n"];
    [initLog addAttribute:NSForegroundColorAttributeName value:[UIColor whiteColor] range:NSMakeRange(0, initLog.length)];
    [initLog addAttribute:NSFontAttributeName value:g_logTextView.font range:NSMakeRange(0, initLog.length)];
    g_logTextView.attributedText = initLog; [contentView addSubview:g_logTextView];
    CGFloat bottomBtnWidth = (contentView.bounds.size.width - 3 * padding) / 2;
    UIButton *closeButton = createButton(@"关闭面板", @"xmark.circle", kButtonTag_ClosePanel, ECHO_COLOR_ACTION_CLOSE);
    closeButton.frame = CGRectMake(padding, contentView.bounds.size.height - 50, bottomBtnWidth, 40); [contentView addSubview:closeButton];
    UIButton *sendLastReportButton = createButton(@"发送报告", @"arrow.up.forward.app", kButtonTag_SendLastReportToAI, ECHO_COLOR_ACTION_AI);
    sendLastReportButton.frame = CGRectMake(padding * 2 + bottomBtnWidth, contentView.bounds.size.height - 50, bottomBtnWidth, 40); [contentView addSubview:sendLastReportButton];
    g_mainControlPanelView.alpha = 0; [keyWindow addSubview:g_mainControlPanelView];
    [UIView animateWithDuration:0.4 animations:^{ g_mainControlPanelView.alpha = 1.0; }];
}
%new
- (void)buttonTouchDown:(UIButton *)sender { [UIView animateWithDuration:0.1 animations:^{ sender.alpha = 0.7; }]; }
%new
- (void)buttonTouchUp:(UIButton *)sender { [UIView animateWithDuration:0.1 animations:^{ sender.alpha = 1.0; }]; }
%new
- (void)handleMasterButtonTap:(UIButton *)sender {
    if (!sender) { if (g_mainControlPanelView) { [UIView animateWithDuration:0.3 animations:^{ g_mainControlPanelView.alpha = 0; } completion:^(BOOL finished) { [g_mainControlPanelView removeFromSuperview]; g_mainControlPanelView = nil; g_logTextView = nil; }]; } return; }
    if (g_s1_isExtracting || g_s2_isExtractingKeChuanDetail || g_isExtractingNianming || g_extractedData) { if (sender.tag != kButtonTag_ClosePanel) { LogMessage(EchoLogError, @"[错误] 当前有任务在后台运行，请等待完成后重试。"); return; } }
    __weak typeof(self) weakSelf = self;
    switch (sender.tag) {
        case kButtonTag_AIPromptToggle: { sender.selected = !sender.selected; g_shouldIncludeAIPromptHeader = sender.selected; NSString *status = g_shouldIncludeAIPromptHeader ? @"开启" : @"关闭"; [sender setTitle:[NSString stringWithFormat:@"Prompt: %@", status] forState:UIControlStateNormal]; sender.backgroundColor = g_shouldIncludeAIPromptHeader ? ECHO_COLOR_PROMPT_ON : ECHO_COLOR_AUX_GREY; LogMessage(EchoLogTypeInfo, @"[设置] Prompt已 %@。", status); break; }
        case kButtonTag_ClosePanel: [self handleMasterButtonTap:nil]; break;
        case kButtonTag_SendLastReportToAI: { NSString *lastReport = g_lastGeneratedReport; if (lastReport && lastReport.length > 0) { [self presentAIActionSheetWithReport:lastReport]; } else { LogMessage(EchoLogTypeWarning, @"内部报告缓存为空。"); [self showEchoNotificationWithTitle:@"操作无效" message:@"尚未生成任何报告。"]; } break; }
        case kButtonTag_StandardReport: [self executeSimpleExtraction]; break;
        case kButtonTag_DeepDiveReport: [self executeCompositeExtraction]; break;
        case kButtonTag_KeTi: { [self startS1ExtractionWithTaskType:@"KeTi" includeXiangJie:YES completion:^(NSString *result) { dispatch_async(dispatch_get_main_queue(), ^{ __strong typeof(weakSelf) strongSelf = weakSelf; if (!strongSelf) return; NSMutableDictionary *reportData = [NSMutableDictionary dictionary]; reportData[@"课体范式_详"] = result; NSString *finalReport = formatFinalReport(reportData); g_lastGeneratedReport = [finalReport copy]; [strongSelf presentAIActionSheetWithReport:finalReport]; g_s1_isExtracting = NO; g_s1_currentTaskType = nil; g_s1_completion_handler = nil; }); }]; break; }
        case kButtonTag_JiuZongMen: { [self startS1ExtractionWithTaskType:@"JiuZongMen" includeXiangJie:YES completion:^(NSString *result) { dispatch_async(dispatch_get_main_queue(), ^{ __strong typeof(weakSelf) strongSelf = weakSelf; if (!strongSelf) return; NSMutableDictionary *reportData = [NSMutableDictionary dictionary]; reportData[@"九宗门_详"] = result; NSString *finalReport = formatFinalReport(reportData); g_lastGeneratedReport = [finalReport copy]; [strongSelf presentAIActionSheetWithReport:finalReport]; g_s1_isExtracting = NO; g_s1_currentTaskType = nil; g_s1_completion_handler = nil; }); }]; break; }
        case kButtonTag_KeChuan: [self startExtraction_Truth_S2_WithCompletion:nil]; break;
        case kButtonTag_ShenSha: {
            [self showProgressHUD:@"正在提取神煞信息..."];
            [self extractShenShaInfo_CompleteWithCompletion:^(NSString *shenShaResult) {
                __strong typeof(weakSelf) strongSelf = weakSelf; if (!strongSelf) return;
                [strongSelf hideProgressHUD];
                if (shenShaResult) {
                    NSMutableDictionary *reportData = [NSMutableDictionary dictionary];
                    reportData[@"神煞详情"] = shenShaResult;
                    NSString *finalReport = formatFinalReport(reportData);
                    g_lastGeneratedReport = [finalReport copy];
                    [strongSelf presentAIActionSheetWithReport:finalReport];
                }
            }];
            break;
        }
        case kButtonTag_NianMing: { [self extractNianmingInfoWithCompletion:^(NSString *nianmingText) { __strong typeof(weakSelf) strongSelf = weakSelf; if (!strongSelf) return; NSMutableDictionary *reportData = [NSMutableDictionary dictionary]; reportData[@"行年参数"] = nianmingText; NSString *finalReport = formatFinalReport(reportData); g_lastGeneratedReport = [finalReport copy]; [strongSelf hideProgressHUD]; [strongSelf presentAIActionSheetWithReport:finalReport]; }]; break; }
        case kButtonTag_BiFa: { [self extractSpecificPopupWithSelectorName:@"顯示法訣總覽" taskName:@"毕法要诀" completion:^(NSString *result) { __strong typeof(weakSelf) strongSelf = weakSelf; if (!strongSelf) return; NSMutableDictionary *reportData = [NSMutableDictionary dictionary]; reportData[@"毕法要诀"] = result; NSString *finalReport = formatFinalReport(reportData); g_lastGeneratedReport = [finalReport copy]; [strongSelf hideProgressHUD]; [strongSelf presentAIActionSheetWithReport:finalReport]; }]; break; }
        case kButtonTag_GeJu: { [self extractSpecificPopupWithSelectorName:@"顯示格局總覽" taskName:@"格局要览" completion:^(NSString *result) { __strong typeof(weakSelf) strongSelf = weakSelf; if (!strongSelf) return; NSMutableDictionary *reportData = [NSMutableDictionary dictionary]; reportData[@"格局要览"] = result; NSString *finalReport = formatFinalReport(reportData); g_lastGeneratedReport = [finalReport copy]; [strongSelf hideProgressHUD]; [strongSelf presentAIActionSheetWithReport:finalReport]; }]; break; }
        case kButtonTag_FangFa: { [self extractSpecificPopupWithSelectorName:@"顯示方法總覽" taskName:@"解析方法" completion:^(NSString *result) { __strong typeof(weakSelf) strongSelf = weakSelf; if (!strongSelf) return; NSMutableDictionary *reportData = [NSMutableDictionary dictionary]; reportData[@"解析方法"] = result; NSString *finalReport = formatFinalReport(reportData); g_lastGeneratedReport = [finalReport copy]; [strongSelf hideProgressHUD]; [strongSelf presentAIActionSheetWithReport:finalReport]; }]; break; }
        default: break;
    }
}
%new
- (void)presentAIActionSheetWithReport:(NSString *)report {
    if (!report || report.length == 0) { LogMessage(EchoLogError, @"报告为空，无法执行后续操作。"); return; }
    [UIPasteboard generalPasteboard].string = report; 
    UIAlertController *actionSheet = [UIAlertController alertControllerWithTitle:@"发送到AI助手" message:@"将使用内部缓存的报告内容" preferredStyle:UIAlertControllerStyleActionSheet];
    NSString *encodedReport = [report stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];
    NSArray *aiApps = @[ @{@"name": @"Kimi", @"scheme": @"kimi://", @"format": @"kimi://chat?q=%@"}, @{@"name": @"豆包", @"scheme": @"doubao://", @"format": @"doubao://chat/send?text=%@"}, @{@"name": @"腾讯元宝", @"scheme": @"yuanbao://", @"format": @"yuanbao://send?text=%@"}, @{@"name": @"ChatGPT", @"scheme": @"chatgpt://", @"format": @"chatgpt://chat?message=%@"}, @{@"name": @"DeepSeek", @"scheme": @"deepseek://", @"format": @"deepseek://send?text=%@"}, @{@"name": @"智谱清言", @"scheme": @"zhipuai://", @"format": @"zhipuai://chat/send?text=%@"}, @{@"name": @"BotGem", @"scheme": @"botgem://", @"format": @"botgem://send?text=%@"} ];
    int availableApps = 0;
    for (NSDictionary *appInfo in aiApps) {
        NSString *checkScheme = appInfo[@"scheme"];
        if ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:checkScheme]]) {
            UIAlertAction *action = [UIAlertAction actionWithTitle:[NSString stringWithFormat:@"发送到 %@", appInfo[@"name"]] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                NSString *urlString = [NSString stringWithFormat:appInfo[@"format"], encodedReport];
                NSURL *url = [NSURL URLWithString:urlString];
                [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:^(BOOL success) {
                    if(success) { LogMessage(EchoLogTypeSuccess, @"成功跳转到 %@", appInfo[@"name"]); } else { LogMessage(EchoLogError, @"跳转到 %@ 失败", appInfo[@"name"]); }
                }];
            }];
            [actionSheet addAction:action];
            availableApps++;
        }
    }
    if (availableApps == 0) { actionSheet.message = @"未检测到受支持的AI App。\n内容已复制到剪贴板。"; }
    UIAlertAction *copyAction = [UIAlertAction actionWithTitle:@"仅复制到剪贴板" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) { LogMessage(EchoLogTypeSuccess, @"报告已复制到剪贴板。"); [self showEchoNotificationWithTitle:@"复制成功" message:@"报告内容已同步至剪贴板。"]; }];
    [actionSheet addAction:copyAction];
    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
    [actionSheet addAction:cancelAction];
    if (actionSheet.popoverPresentationController) {
        actionSheet.popoverPresentationController.sourceView = self.view;
        actionSheet.popoverPresentationController.sourceRect = CGRectMake(self.view.bounds.size.width / 2.0, self.view.bounds.size.height, 1.0, 1.0);
        actionSheet.popoverPresentationController.permittedArrowDirections = 0;
    }
    [self presentViewController:actionSheet animated:YES completion:nil];
}
%new
- (void)showProgressHUD:(NSString *)text {
    UIWindow *keyWindow = GetFrontmostWindow(); if (!keyWindow) return;
    UIView *existing = [keyWindow viewWithTag:kEchoProgressHUDTag];
    if(existing) [existing removeFromSuperview];
    UIView *progressView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 220, 120)];
    progressView.center = keyWindow.center;
    progressView.backgroundColor = [UIColor colorWithWhite:0.0 alpha:0.8];
    progressView.layer.cornerRadius = 10;
    progressView.tag = kEchoProgressHUDTag;
    UIActivityIndicatorView *spinner;
    if (@available(iOS 13.0, *)) {
         spinner = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleLarge];
         spinner.color = [UIColor whiteColor];
    } else {
        #pragma clang diagnostic push
        #pragma clang diagnostic ignored "-Wdeprecated-declarations"
        spinner = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
        #pragma clang diagnostic pop
    }
    spinner.center = CGPointMake(110, 50);
    [spinner startAnimating];
    [progressView addSubview:spinner];
    UILabel *progressLabel = [[UILabel alloc] initWithFrame:CGRectMake(10, 85, 200, 30)];
    progressLabel.textColor = [UIColor whiteColor];
    progressLabel.textAlignment = NSTextAlignmentCenter;
    progressLabel.font = [UIFont systemFontOfSize:14];
    progressLabel.adjustsFontSizeToFitWidth = YES;
    progressLabel.text = text;
    [progressView addSubview:progressLabel];
    [keyWindow addSubview:progressView];
}
%new
- (void)updateProgressHUD:(NSString *)text {
    UIWindow *keyWindow = GetFrontmostWindow(); if (!keyWindow) return;
    UIView *progressView = [keyWindow viewWithTag:kEchoProgressHUDTag];
    if (progressView) { for (UIView *subview in progressView.subviews) { if ([subview isKindOfClass:[UILabel class]]) { ((UILabel *)subview).text = text; break; } } }
}
%new
- (void)hideProgressHUD {
    UIWindow *keyWindow = GetFrontmostWindow(); if (!keyWindow) return;
    UIView *progressView = [keyWindow viewWithTag:kEchoProgressHUDTag];
    if (progressView) { [UIView animateWithDuration:0.3 animations:^{ progressView.alpha = 0; } completion:^(BOOL finished) { [progressView removeFromSuperview]; }]; }
}
%new
- (void)showEchoNotificationWithTitle:(NSString *)title message:(NSString *)message {
    UIWindow *keyWindow = GetFrontmostWindow(); if (!keyWindow) return;
    CGFloat topPadding = 0;
    if (@available(iOS 11.0, *)) { topPadding = keyWindow.safeAreaInsets.top; }
    topPadding = topPadding > 0 ? topPadding : 20;
    CGFloat bannerWidth = keyWindow.bounds.size.width - 32;
    UIView *bannerView = [[UIView alloc] initWithFrame:CGRectMake(16, -100, bannerWidth, 60)];
    bannerView.layer.cornerRadius = 12;
    bannerView.clipsToBounds = YES;
    UIVisualEffectView *blurEffectView = nil;
    if (@available(iOS 8.0, *)) {
        blurEffectView = [[UIVisualEffectView alloc] initWithEffect:[UIBlurEffect effectWithStyle:UIBlurEffectStyleProminent]];
        blurEffectView.frame = bannerView.bounds;
        [bannerView addSubview:blurEffectView];
    } else {
        bannerView.backgroundColor = [UIColor colorWithWhite:1.0 alpha:0.9];
    }
    UIView *containerForLabels = blurEffectView ? blurEffectView.contentView : bannerView;
    UILabel *iconLabel = [[UILabel alloc] initWithFrame:CGRectMake(15, 20, 20, 20)];
    iconLabel.text = @"✓";
    iconLabel.textColor = [UIColor colorWithRed:0.2 green:0.78 blue:0.35 alpha:1.0];
    iconLabel.font = [UIFont boldSystemFontOfSize:16];
    [containerForLabels addSubview:iconLabel];
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(45, 12, bannerWidth - 55, 20)];
    titleLabel.text = title;
    titleLabel.font = [UIFont boldSystemFontOfSize:15];
    if (@available(iOS 13.0, *)) { titleLabel.textColor = [UIColor labelColor]; } else { titleLabel.textColor = [UIColor blackColor];}
    [containerForLabels addSubview:titleLabel];
    UILabel *messageLabel = [[UILabel alloc] initWithFrame:CGRectMake(45, 32, bannerWidth - 55, 16)];
    messageLabel.text = message;
    messageLabel.font = [UIFont systemFontOfSize:13];
    if (@available(iOS 13.0, *)) { messageLabel.textColor = [UIColor secondaryLabelColor]; } else { messageLabel.textColor = [UIColor darkGrayColor]; }
    [containerForLabels addSubview:messageLabel];
    [keyWindow addSubview:bannerView];
    [UIView animateWithDuration:0.5 delay:0 usingSpringWithDamping:0.7 initialSpringVelocity:0.5 options:UIViewAnimationOptionCurveEaseInOut animations:^{
        bannerView.frame = CGRectMake(16, topPadding, bannerWidth, 60);
    } completion:nil];
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [UIView animateWithDuration:0.3 animations:^{
            bannerView.alpha = 0;
            bannerView.transform = CGAffineTransformMakeScale(0.9, 0.9);
        } completion:^(BOOL finished) {
            [bannerView removeFromSuperview];
        }];
    });
}
%new
- (void)extractTimeInfoWithCompletion:(void (^)(void))completion {
    LogMessage(EchoLogTypeInfo, @"[盘面] 开始通过弹窗提取时间信息...");
    g_isExtractingTimeInfo = YES;
    SEL showTimePickerSelector = NSSelectorFromString(@"顯示時間選擇");
    if ([self respondsToSelector:showTimePickerSelector]) {
        dispatch_async(dispatch_get_main_queue(), ^{ SUPPRESS_LEAK_WARNING([self performSelector:showTimePickerSelector]); });
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            for (int i = 0; i < 50; i++) { if (!g_isExtractingTimeInfo) break; [NSThread sleepForTimeInterval:0.1]; }
            dispatch_async(dispatch_get_main_queue(), ^{ if (completion) completion(); });
        });
    } else {
        LogMessage(EchoLogError, @"[时间] 错误: 找不到 '顯示時間選擇' 方法。");
        g_extractedData[@"时间块"] = @"[时间提取失败: 找不到方法]";
        g_isExtractingTimeInfo = NO;
        if (completion) completion();
    }
}
%new
- (NSString *)extractSwitchedXunKongInfo {
    SEL switchSelector = NSSelectorFromString(@"切換旬日");
    if ([self respondsToSelector:switchSelector]) {
        LogMessage(EchoLogTypeInfo, @"[旬空] 正在模拟点击以获取另一状态...");
        SUPPRESS_LEAK_WARNING([self performSelector:switchSelector]);
        [NSThread sleepForTimeInterval:0.1];
        NSString *switchedText = [self extractTextFromFirstViewOfClassName:@"六壬大占.旬空視圖" separator:@" "];
        SUPPRESS_LEAK_WARNING([self performSelector:switchSelector]);
        return switchedText;
    } else {
        LogMessage(EchoLogTypeWarning, @"[旬空] 在 ViewController 上未找到 '切換旬日' 方法。");
        return @"";
    }
}
%new
- (void)extractKePanInfoWithCompletion:(void (^)(NSMutableDictionary *reportData))completion {
    g_extractedData = [NSMutableDictionary dictionary];
    [self extractTimeInfoWithCompletion:^{
        LogMessage(EchoLogTypeInfo, @"[盘面] 时间提取完成，开始解析其他基础信息...");
        NSString *textA = [self extractTextFromFirstViewOfClassName:@"六壬大占.旬空視圖" separator:@" "];
        NSString *textB = [self extractSwitchedXunKongInfo];
        NSString *xunInfo = nil, *liuQinFullInfo = nil;
        if ([textA containsString:@"旬"]) { xunInfo = textA; liuQinFullInfo = textB; } 
        else if ([textB containsString:@"旬"]) { xunInfo = textB; liuQinFullInfo = textA; } 
        else { xunInfo = textA; liuQinFullInfo = textB; LogMessage(EchoLogTypeWarning, @"[旬空] 无法通过'旬'字识别，采用默认顺序。"); }
        NSString *riGan = @"", *liuQinStr = @"";
        if (liuQinFullInfo.length > 0) {
            NSRange riRange = [liuQinFullInfo rangeOfString:@"日"];
            if (riRange.location != NSNotFound) {
                riGan = [liuQinFullInfo substringToIndex:1];
                liuQinStr = [[liuQinFullInfo substringFromIndex:riRange.location + 1] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
                liuQinStr = [liuQinStr stringByReplacingOccurrencesOfString:@"空" withString:@""];
            } else { liuQinStr = [liuQinFullInfo stringByReplacingOccurrencesOfString:@"空" withString:@""]; }
        }
        NSMutableArray<NSString *> *liuQinArray = [NSMutableArray array];
        if(liuQinStr.length > 0) {
            for (int i = 0; i < liuQinStr.length; i += 2) {
                if (i + 2 <= liuQinStr.length) { [liuQinArray addObject:[liuQinStr substringWithRange:NSMakeRange(i, 2)]]; }
            }
        }
        g_extractedData[@"旬空_旬信息"] = [xunInfo stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
        g_extractedData[@"旬空_日干"] = riGan;
        g_extractedData[@"旬空_六亲数组"] = liuQinArray;
        g_extractedData[@"旬空_六亲"] = [liuQinStr stringByReplacingOccurrencesOfString:@"/" withString:@""];
        LogMessage(EchoLogTypeSuccess, @"[旬空] 识别结果 -> 旬信息:[%@], 日干:[%@], 六亲:%@", g_extractedData[@"旬空_旬信息"], riGan, [liuQinArray componentsJoinedByString:@","]);
        g_extractedData[@"月将"] = [self extractTextFromFirstViewOfClassName:@"六壬大占.七政視圖" separator:@" "];
        g_extractedData[@"昼夜"] = [self extractTextFromFirstViewOfClassName:@"六壬大占.晝夜切換視圖" separator:@" "];
        g_extractedData[@"天地盘"] = [self extractTianDiPanInfo_V18];
        g_extractedData[@"四课"] = [self _echo_extractSiKeInfo];
        g_extractedData[@"三传"] = [self _echo_extractSanChuanInfo];
        LogMessage(EchoLogTypeInfo, @"[盘面] 开始解析弹窗类信息 (毕法/格局等)...");
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            SEL sBiFa = NSSelectorFromString(@"顯示法訣總覽"), sGeJu = NSSelectorFromString(@"顯示格局總覽"), sQiZheng = NSSelectorFromString(@"顯示七政信息WithSender:"), sFangFa = NSSelectorFromString(@"顯示方法總覽"), sSanGong = NSSelectorFromString(@"顯示三宮時信息WithSender:");
            if ([self respondsToSelector:sBiFa]) { dispatch_sync(dispatch_get_main_queue(), ^{ SUPPRESS_LEAK_WARNING([self performSelector:sBiFa withObject:nil]); }); [NSThread sleepForTimeInterval:0.4]; }
            if ([self respondsToSelector:sGeJu]) { dispatch_sync(dispatch_get_main_queue(), ^{ SUPPRESS_LEAK_WARNING([self performSelector:sGeJu withObject:nil]); }); [NSThread sleepForTimeInterval:0.4]; }
            if ([self respondsToSelector:sFangFa]) { dispatch_sync(dispatch_get_main_queue(), ^{ SUPPRESS_LEAK_WARNING([self performSelector:sFangFa withObject:nil]); }); [NSThread sleepForTimeInterval:0.4]; }
            if ([self respondsToSelector:sQiZheng]) { dispatch_sync(dispatch_get_main_queue(), ^{ SUPPRESS_LEAK_WARNING([self performSelector:sQiZheng withObject:nil]); }); [NSThread sleepForTimeInterval:0.4]; }
            if ([self respondsToSelector:sSanGong]) { dispatch_sync(dispatch_get_main_queue(), ^{ SUPPRESS_LEAK_WARNING([self performSelector:sSanGong withObject:nil]); }); [NSThread sleepForTimeInterval:0.4]; }
            dispatch_async(dispatch_get_main_queue(), ^{
                LogMessage(EchoLogTypeInfo, @"[盘面] 整合所有信息...");
                NSArray *keysToClean = @[@"毕法要诀", @"格局要览", @"解析方法"]; NSArray *trash = @[@"通类门→\n", @"通类门→", @"通類門→\n", @"通類門→"];
                for (NSString *key in keysToClean) {
                    NSString *value = g_extractedData[key];
                    if (value) { for (NSString *t in trash) { value = [value stringByReplacingOccurrencesOfString:t withString:@""]; } g_extractedData[key] = value; }
                }
                if (completion) { completion(g_extractedData); }
            });
        });
    }];
}
%new
- (void)startS1ExtractionWithTaskType:(NSString *)taskType includeXiangJie:(BOOL)include completion:(void (^)(NSString *result))completion {
    g_s1_isExtracting = YES; g_s1_currentTaskType = taskType; g_s1_shouldIncludeXiangJie = include; g_s1_completion_handler = [completion copy];
    NSString *mode = include ? @"详" : @"简";
    if(g_s1_completion_handler) { LogMessage(EchoLogTypeInfo, @"[集成任务] 开始提取 %@ (%@)...", taskType, mode); } 
    else { LogMessage(EchoLogTypeTask, @"[任务启动] 模式: %@ (详情: %@)", taskType, include ? @"开启" : @"关闭"); }
    if ([taskType isEqualToString:@"KeTi"]) {
        UIWindow *keyWindow = GetFrontmostWindow(); if (!keyWindow) { LogMessage(EchoLogError, @"[错误] 无法找到主窗口。"); if(g_s1_completion_handler){g_s1_completion_handler(@"[错误:未找到主窗口]"); g_s1_completion_handler = nil;} g_s1_isExtracting = NO; return; }
        Class keTiCellClass = NSClassFromString(@"六壬大占.課體單元"); if (!keTiCellClass) { LogMessage(EchoLogError, @"[错误] 无法找到 '課體單元' 类。"); if(g_s1_completion_handler){g_s1_completion_handler(@"[错误:未找到課體單元类]"); g_s1_completion_handler = nil;} g_s1_isExtracting = NO; return; }
        NSMutableArray<UICollectionView *> *allCVs = [NSMutableArray array];
        FindSubviewsOfClassRecursive([UICollectionView class], keyWindow, allCVs);
        for (UICollectionView *cv in allCVs) {
            for (id cell in cv.visibleCells) { if ([cell isKindOfClass:keTiCellClass]) { g_s1_keTi_targetCV = cv; break; } }
            if(g_s1_keTi_targetCV) break;
        }
        if (!g_s1_keTi_targetCV) { LogMessage(EchoLogError, @"[错误] 无法找到包含“课体”的UICollectionView。"); if(g_s1_completion_handler){g_s1_completion_handler(@"[错误:未找到课体CV]"); g_s1_completion_handler = nil;} g_s1_isExtracting = NO; return; }
        g_s1_keTi_workQueue = [NSMutableArray array]; g_s1_keTi_resultsArray = [NSMutableArray array];
        NSInteger totalItems = [g_s1_keTi_targetCV.dataSource collectionView:g_s1_keTi_targetCV numberOfItemsInSection:0];
        for (NSInteger i = 0; i < totalItems; i++) { [g_s1_keTi_workQueue addObject:[NSIndexPath indexPathForItem:i inSection:0]]; }
        if (g_s1_keTi_workQueue.count == 0) {
            LogMessage(EchoLogTypeWarning, @"[警告] 未找到任何“课体”单元来创建任务队列。");
            if(g_s1_completion_handler){ g_s1_completion_handler(@""); g_s1_completion_handler = nil; }
            g_s1_isExtracting = NO; return;
        }
        LogMessage(EchoLogTypeInfo, @"[解析] 发现 %lu 个“课体范式”单元，开始处理...", (unsigned long)g_s1_keTi_workQueue.count);
        [self processKeTiWorkQueue_S1];
    } else if ([taskType isEqualToString:@"JiuZongMen"]) {
        SEL selector = NSSelectorFromString(@"顯示九宗門概覽");
        if ([self respondsToSelector:selector]) { LogMessage(EchoLogTypeInfo, @"[调用] 正在请求“九宗门”数据..."); SUPPRESS_LEAK_WARNING([self performSelector:selector]); } 
        else { LogMessage(EchoLogError, @"[错误] 当前视图无法响应 '顯示九宗門概覽'。"); if(g_s1_completion_handler){ g_s1_completion_handler(@"[错误:无法响应九宗门方法]"); g_s1_completion_handler = nil; } g_s1_isExtracting = NO; }
    }
}
%new
- (void)processKeTiWorkQueue_S1 {
    if (g_s1_keTi_workQueue.count == 0) {
        LogMessage(EchoLogTypeTask, @"[完成] 所有 %lu 项“课体范式”处理完毕。", (unsigned long)g_s1_keTi_resultsArray.count);
        NSString *finalResult = [g_s1_keTi_resultsArray componentsJoinedByString:@"\n\n"];
        NSString *trimmedResult = [finalResult stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
        g_s1_keTi_targetCV = nil; g_s1_keTi_workQueue = nil; g_s1_keTi_resultsArray = nil;
        if (g_s1_completion_handler) { g_s1_completion_handler(trimmedResult); }
        return;
    }
    NSIndexPath *indexPath = g_s1_keTi_workQueue.firstObject; [g_s1_keTi_workQueue removeObjectAtIndex:0];
    LogMessage(EchoLogTypeInfo, @"[解析] 正在处理“课体范式” %lu/%lu...", (unsigned long)(g_s1_keTi_resultsArray.count + 1), (unsigned long)(g_s1_keTi_resultsArray.count + g_s1_keTi_workQueue.count + 1));
    id delegate = g_s1_keTi_targetCV.delegate;
    if (delegate && [delegate respondsToSelector:@selector(collectionView:didSelectItemAtIndexPath:)]) { [delegate collectionView:g_s1_keTi_targetCV didSelectItemAtIndexPath:indexPath]; } 
    else { LogMessage(EchoLogError, @"[错误] 无法触发单元点击事件。"); [self processKeTiWorkQueue_S1]; }
}
%new
- (void)executeSimpleExtraction {
    __weak typeof(self) weakSelf = self;
    LogMessage(EchoLogTypeTask, @"[任务启动] 模式: 标准报告");
    [self showProgressHUD:@"1/5: 解析基础盘面..."];
    __block NSMutableDictionary *reportData = [NSMutableDictionary dictionary];
    
    [self extractKePanInfoWithCompletion:^(NSMutableDictionary *baseReportData) {
        [reportData addEntriesFromDictionary:baseReportData];
        __strong typeof(weakSelf) strongSelf = weakSelf; if (!strongSelf) return;
        
        [strongSelf updateProgressHUD:@"2/5: 分析行年参数..."];
        [strongSelf extractNianmingInfoWithCompletion:^(NSString *nianmingText) {
            reportData[@"行年参数"] = nianmingText;
            __strong typeof(weakSelf) strongSelf2 = weakSelf; if (!strongSelf2) return;

            [strongSelf2 updateProgressHUD:@"3/5: 提取神煞系统..."];
            [strongSelf2 extractShenShaInfo_CompleteWithCompletion:^(NSString *shenShaResult) {
                reportData[@"神煞详情"] = shenShaResult;
                __strong typeof(weakSelf) strongSelf3 = weakSelf; if (!strongSelf3) return;

                [strongSelf3 updateProgressHUD:@"4/5: 解析课体范式..."];
                [strongSelf3 startS1ExtractionWithTaskType:@"KeTi" includeXiangJie:NO completion:^(NSString *keTiResult) {
                    reportData[@"课体范式_简"] = keTiResult;
                    __strong typeof(weakSelf) strongSelf4 = weakSelf; if (!strongSelf4) return;
                    
                    [strongSelf4 updateProgressHUD:@"5/5: 解析九宗门..."];
                    [strongSelf4 startS1ExtractionWithTaskType:@"JiuZongMen" includeXiangJie:NO completion:^(NSString *jiuZongMenResult) {
                        reportData[@"九宗门_简"] = jiuZongMenResult;
                        dispatch_async(dispatch_get_main_queue(), ^{
                            __strong typeof(weakSelf) strongSelf5 = weakSelf; if (!strongSelf5) return;
                            LogMessage(EchoLogTypeInfo, @"[整合] 所有部分解析完成，正在生成结构化报告...");
                            NSString *finalReport = formatFinalReport(reportData);
                            g_lastGeneratedReport = [finalReport copy];
                            [strongSelf5 hideProgressHUD];
                            [strongSelf5 presentAIActionSheetWithReport:finalReport];
                            LogMessage(EchoLogTypeTask, @"[完成] “标准报告”任务已完成。");
                            g_extractedData = nil; g_s1_isExtracting = NO; g_s1_completion_handler = nil;
                            LogMessage(EchoLogTypeInfo, @"[状态] 全局数据已清理。");
                        });
                    }];
                }];
            }];
        }];
    }];
}
%new
- (void)executeCompositeExtraction {
    __weak typeof(self) weakSelf = self;
    LogMessage(EchoLogTypeTask, @"[任务启动] 模式: 深度解构");
    [self showProgressHUD:@"1/6: 解析基础盘面..."];
    __block NSMutableDictionary *reportData = [NSMutableDictionary dictionary];
    
    [self extractKePanInfoWithCompletion:^(NSMutableDictionary *baseReportData) {
        [reportData addEntriesFromDictionary:baseReportData];
        __strong typeof(weakSelf) strongSelf = weakSelf; if (!strongSelf) return;

        [strongSelf updateProgressHUD:@"2/6: 推演课传流注..."];
        [strongSelf startExtraction_Truth_S2_WithCompletion:^{
            reportData[@"课传详解"] = SafeString(g_s2_finalResultFromKeChuan);
            __strong typeof(weakSelf) strongSelf2 = weakSelf; if (!strongSelf2) return;
            
            [strongSelf2 updateProgressHUD:@"3/6: 分析行年参数..."];
            [strongSelf2 extractNianmingInfoWithCompletion:^(NSString *nianmingText) {
                reportData[@"行年参数"] = nianmingText;
                __strong typeof(weakSelf) strongSelf3 = weakSelf; if (!strongSelf3) return;

                [strongSelf3 updateProgressHUD:@"4/6: 提取神煞系统..."];
                [strongSelf3 extractShenShaInfo_CompleteWithCompletion:^(NSString *shenShaResult) {
                    reportData[@"神煞详情"] = shenShaResult;
                    __strong typeof(weakSelf) strongSelf4 = weakSelf; if (!strongSelf4) return;
                 
                    [strongSelf4 updateProgressHUD:@"5/6: 解析课体范式..."];
                    [strongSelf4 startS1ExtractionWithTaskType:@"KeTi" includeXiangJie:NO completion:^(NSString *keTiResult) {
                        reportData[@"课体范式_简"] = keTiResult;
                        __strong typeof(weakSelf) strongSelf5 = weakSelf; if (!strongSelf5) return;
                        
                        [strongSelf5 updateProgressHUD:@"6/6: 解析九宗门..."];
                        [strongSelf5 startS1ExtractionWithTaskType:@"JiuZongMen" includeXiangJie:NO completion:^(NSString *jiuZongMenResult) {
                            reportData[@"九宗门_简"] = jiuZongMenResult;
                            dispatch_async(dispatch_get_main_queue(), ^{
                                __strong typeof(weakSelf) strongSelf6 = weakSelf; if (!strongSelf6) return;
                                LogMessage(EchoLogTypeInfo, @"[整合] 所有部分解析完成，正在生成结构化报告...");
                                NSString *finalReport = formatFinalReport(reportData);
                                g_lastGeneratedReport = [finalReport copy];
                                [strongSelf6 hideProgressHUD];
                                [strongSelf6 presentAIActionSheetWithReport:finalReport];
                                LogMessage(EchoLogTypeTask, @"--- [完成] “深度解构”任务已全部完成 ---");
                                g_extractedData = nil; g_s1_isExtracting = NO; g_s1_completion_handler = nil; g_s2_finalResultFromKeChuan = nil;
                                LogMessage(EchoLogTypeInfo, @"[状态] 全局数据已清理。");
                            });
                        }];
                    }];
                }];
            }];
        }];
    }];
}
%new
- (void)extractSpecificPopupWithSelectorName:(NSString *)selectorName taskName:(NSString *)taskName completion:(void (^)(NSString *result))completion {
    LogMessage(EchoLogTypeTask, @"[精准分析] 任务启动: %@", taskName);
    [self showProgressHUD:[NSString stringWithFormat:@"正在分析: %@", taskName]];
    g_extractedData = [NSMutableDictionary dictionary];
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        SEL selector = NSSelectorFromString(selectorName);
        if ([self respondsToSelector:selector]) {
            dispatch_sync(dispatch_get_main_queue(), ^{ SUPPRESS_LEAK_WARNING([self performSelector:selector withObject:nil]); });
            [NSThread sleepForTimeInterval:0.5];
        } else { LogMessage(EchoLogError, @"[错误] 无法响应选择器 '%@'", selectorName); }
        dispatch_async(dispatch_get_main_queue(), ^{
            NSString *result = g_extractedData[taskName];
            if (result.length > 0) {
                NSArray *trash = @[@"通类门→\n", @"通类门→", @"通類門→\n", @"通類門→"];
                for (NSString *t in trash) { result = [result stringByReplacingOccurrencesOfString:t withString:@""]; }
            } else { result = @""; LogMessage(EchoLogTypeWarning, @"[警告] %@ 分析失败或无内容。", taskName); }
            if (completion) { completion(result); }
            g_extractedData = nil;
        });
    });
}
%new
- (void)startExtraction_Truth_S2_WithCompletion:(void (^)(void))completion {
    if (g_s2_isExtractingKeChuanDetail) { LogMessage(EchoLogError, @"[错误] 课传推演任务已在进行中。"); return; }
    LogMessage(EchoLogTypeTask, @"[任务启动] 开始推演“课传流注”...");
    [self showProgressHUD:@"正在推演课传流注..."];
    g_s2_isExtractingKeChuanDetail = YES; g_s2_keChuan_completion_handler = [completion copy]; g_s2_capturedKeChuanDetailArray = [NSMutableArray array]; g_s2_keChuanWorkQueue = [NSMutableArray array]; g_s2_keChuanTitleQueue = [NSMutableArray array];
    Ivar keChuanContainerIvar = class_getInstanceVariable([self class], "課傳");
    if (!keChuanContainerIvar) { LogMessage(EchoLogError, @"[错误] 无法定位核心组件'課傳'。"); g_s2_isExtractingKeChuanDetail = NO; if(g_s2_keChuan_completion_handler) g_s2_keChuan_completion_handler(); [self hideProgressHUD]; return; }
    id keChuanContainer = object_getIvar(self, keChuanContainerIvar);
    if (!keChuanContainer) { LogMessage(EchoLogError, @"[错误] 核心组件'課傳'未初始化。"); g_s2_isExtractingKeChuanDetail = NO; if(g_s2_keChuan_completion_handler) g_s2_keChuan_completion_handler(); [self hideProgressHUD]; return; }
    Class sanChuanContainerClass = NSClassFromString(@"六壬大占.三傳視圖");
    NSMutableArray *sanChuanResults = [NSMutableArray array]; FindSubviewsOfClassRecursive(sanChuanContainerClass, (UIView *)keChuanContainer, sanChuanResults);
    if (sanChuanResults.count > 0) {
        UIView *sanChuanContainer = sanChuanResults.firstObject;
        const char *ivarNames[] = {"初傳", "中傳", "末傳", NULL}; NSString *rowTitles[] = {@"初传", @"中传", @"末传"};
        for (int i = 0; ivarNames[i] != NULL; ++i) {
            Ivar ivar = class_getInstanceVariable(sanChuanContainerClass, ivarNames[i]); if (!ivar) continue;
            UIView *chuanView = object_getIvar(sanChuanContainer, ivar); if (!chuanView) continue;
            NSMutableArray *labels = [NSMutableArray array]; FindSubviewsOfClassRecursive([UILabel class], chuanView, labels);
            [labels sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2){ return [@(o1.frame.origin.x) compare:@(o2.frame.origin.x)]; }];
            if(labels.count >= 2) {
                UILabel *dizhiLabel = labels[labels.count-2]; UILabel *tianjiangLabel = labels[labels.count-1];
                if (dizhiLabel.gestureRecognizers.count > 0) { [g_s2_keChuanWorkQueue addObject:[@{@"gesture": dizhiLabel.gestureRecognizers.firstObject, @"taskType": @"diZhi"} mutableCopy]]; [g_s2_keChuanTitleQueue addObject:[NSString stringWithFormat:@"%@ - 地支(%@)", rowTitles[i], dizhiLabel.text]]; }
                if (tianjiangLabel.gestureRecognizers.count > 0) { [g_s2_keChuanWorkQueue addObject:[@{@"gesture": tianjiangLabel.gestureRecognizers.firstObject, @"taskType": @"tianJiang"} mutableCopy]]; [g_s2_keChuanTitleQueue addObject:[NSString stringWithFormat:@"%@ - 天将(%@)", rowTitles[i], tianjiangLabel.text]]; }
            }
        }
    }
    Class siKeContainerClass = NSClassFromString(@"六壬大占.四課視圖");
    NSMutableArray *siKeResults = [NSMutableArray array]; FindSubviewsOfClassRecursive(siKeContainerClass, (UIView *)keChuanContainer, siKeResults);
    if (siKeResults.count > 0) {
        UIView *siKeContainer = siKeResults.firstObject;
        NSDictionary *keDefs[] = { @{@"t": @"第一课", @"x": @"日", @"s": @"日上", @"j": @"日上天將"}, @{@"t": @"第二课", @"x": @"日上", @"s": @"日陰", @"j": @"日陰天將"}, @{@"t": @"第三课", @"x": @"辰", @"s": @"辰上", @"j": @"辰上天將"}, @{@"t": @"第四课", @"x": @"辰上", @"s": @"辰陰", @"j": @"辰陰天將"}};
        void (^addTask)(const char*, NSString*, NSString*) = ^(const char* iName, NSString* fTitle, NSString* tType) {
            if (!iName) return; Ivar ivar = class_getInstanceVariable(siKeContainerClass, iName);
            if (ivar) {
                UILabel *label = (UILabel *)object_getIvar(siKeContainer, ivar);
                if (label.gestureRecognizers.count > 0) { [g_s2_keChuanWorkQueue addObject:[@{@"gesture": label.gestureRecognizers.firstObject, @"taskType": tType} mutableCopy]]; [g_s2_keChuanTitleQueue addObject:[NSString stringWithFormat:@"%@ (%@)", fTitle, label.text]]; }
            }
        };
        for (int i = 0; i < 4; ++i) { NSDictionary *d = keDefs[i]; addTask([d[@"x"] UTF8String], [NSString stringWithFormat:@"%@ - 下神", d[@"t"]], @"diZhi"); addTask([d[@"s"] UTF8String], [NSString stringWithFormat:@"%@ - 上神", d[@"t"]], @"diZhi"); addTask([d[@"j"] UTF8String], [NSString stringWithFormat:@"%@ - 天将", d[@"t"]], @"tianJiang"); }
    }
    if (g_s2_keChuanWorkQueue.count == 0) { LogMessage(EchoLogTypeWarning, @"[课传] 任务队列为空，未找到可交互元素。"); g_s2_isExtractingKeChuanDetail = NO; [self hideProgressHUD]; g_s2_finalResultFromKeChuan = @""; if(g_s2_keChuan_completion_handler) g_s2_keChuan_completion_handler(); return; }
    LogMessage(EchoLogTypeInfo, @"[课传] 任务队列构建完成，总计 %lu 项。", (unsigned long)g_s2_keChuanWorkQueue.count);
    [self processKeChuanQueue_Truth_S2];
}
%new
- (void)processKeChuanQueue_Truth_S2 {
    if (!g_s2_isExtractingKeChuanDetail || g_s2_keChuanWorkQueue.count == 0) {
        if (g_s2_isExtractingKeChuanDetail) {
            LogMessage(EchoLogTypeTask, @"[完成] “课传流注”全部处理完毕。");
            NSMutableString *resultStr = [NSMutableString string];
            if (g_s2_capturedKeChuanDetailArray.count == g_s2_keChuanTitleQueue.count) {
                for (NSUInteger i = 0; i < g_s2_keChuanTitleQueue.count; i++) { [resultStr appendFormat:@"- 对象: %@\n  %@\n\n", g_s2_keChuanTitleQueue[i], [g_s2_capturedKeChuanDetailArray[i] stringByReplacingOccurrencesOfString:@"\n" withString:@"\n  "]]; }
                g_s2_finalResultFromKeChuan = [resultStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                if (!g_s2_keChuan_completion_handler) {
                    NSMutableDictionary *reportData = [NSMutableDictionary dictionary]; reportData[@"课传详解"] = g_s2_finalResultFromKeChuan;
                    NSString *finalReport = formatFinalReport(reportData); g_lastGeneratedReport = [finalReport copy];
                    [self presentAIActionSheetWithReport:finalReport];
                }
            } else { g_s2_finalResultFromKeChuan = @"[错误: 课传流注解析数量不匹配]"; LogMessage(EchoLogError, @"%@", g_s2_finalResultFromKeChuan); }
        }
        g_s2_isExtractingKeChuanDetail = NO; g_s2_capturedKeChuanDetailArray = nil; g_s2_keChuanWorkQueue = nil; g_s2_keChuanTitleQueue = nil;
        [self hideProgressHUD];
        if (g_s2_keChuan_completion_handler) { g_s2_keChuan_completion_handler(); g_s2_keChuan_completion_handler = nil; }
        return;
    }
    NSMutableDictionary *task = g_s2_keChuanWorkQueue.firstObject; [g_s2_keChuanWorkQueue removeObjectAtIndex:0];
    NSString *title = g_s2_keChuanTitleQueue[g_s2_capturedKeChuanDetailArray.count];
    LogMessage(EchoLogTypeInfo, @"[课传] 正在处理: %@", title);
    [self updateProgressHUD:[NSString stringWithFormat:@"推演课传: %lu/%lu", (unsigned long)g_s2_capturedKeChuanDetailArray.count + 1, (unsigned long)g_s2_keChuanTitleQueue.count]];
    SEL action = [task[@"taskType"] isEqualToString:@"tianJiang"] ? NSSelectorFromString(@"顯示課傳天將摘要WithSender:") : NSSelectorFromString(@"顯示課傳摘要WithSender:");
    if ([self respondsToSelector:action]) { SUPPRESS_LEAK_WARNING([self performSelector:action withObject:task[@"gesture"]]); } 
    else { LogMessage(EchoLogError, @"[错误] 方法 %@ 不存在。", NSStringFromSelector(action)); [g_s2_capturedKeChuanDetailArray addObject:@"[解析失败: 方法不存在]"]; [self processKeChuanQueue_Truth_S2]; }
}
%new
- (NSString *)_echo_extractSiKeInfo {
    Class siKeViewClass = NSClassFromString(@"六壬大占.四課視圖"); if (!siKeViewClass) return @"";
    NSMutableArray *siKeViews = [NSMutableArray array]; FindSubviewsOfClassRecursive(siKeViewClass, self.view, siKeViews);
    if (siKeViews.count == 0) return @"";
    UIView *container = siKeViews.firstObject; NSMutableArray *labels = [NSMutableArray array]; FindSubviewsOfClassRecursive([UILabel class], container, labels);
    if (labels.count < 12) return @"";
    NSMutableDictionary *cols = [NSMutableDictionary dictionary];
    for (UILabel *label in labels) { NSString *key = [NSString stringWithFormat:@"%.0f", roundf(CGRectGetMidX(label.frame))]; if (!cols[key]) { cols[key] = [NSMutableArray array]; } [cols[key] addObject:label]; }
    if (cols.allKeys.count != 4) return @"";
    NSArray *keys = [cols.allKeys sortedArrayUsingComparator:^NSComparisonResult(NSString *o1, NSString *o2) { return [@([o1 floatValue]) compare:@([o2 floatValue])]; }];
    NSMutableArray *c1 = cols[keys[0]], *c2 = cols[keys[1]], *c3 = cols[keys[2]], *c4 = cols[keys[3]];
    [c1 sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2) { return [@(o1.frame.origin.y) compare:@(o2.frame.origin.y)]; }];
    [c2 sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2) { return [@(o1.frame.origin.y) compare:@(o2.frame.origin.y)]; }];
    [c3 sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2) { return [@(o1.frame.origin.y) compare:@(o2.frame.origin.y)]; }];
    [c4 sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2) { return [@(o1.frame.origin.y) compare:@(o2.frame.origin.y)]; }];
    NSString *k1_shang = ((UILabel*)c4[0]).text, *k1_jiang = ((UILabel*)c4[1]).text, *k1_xia = ((UILabel*)c4[2]).text;
    NSString *k2_shang = ((UILabel*)c3[0]).text, *k2_jiang = ((UILabel*)c3[1]).text, *k2_xia = ((UILabel*)c3[2]).text;
    NSString *k3_shang = ((UILabel*)c2[0]).text, *k3_jiang = ((UILabel*)c2[1]).text, *k3_xia = ((UILabel*)c2[2]).text;
    NSString *k4_shang = ((UILabel*)c1[0]).text, *k4_jiang = ((UILabel*)c1[1]).text, *k4_xia = ((UILabel*)c1[2]).text;
    return [NSString stringWithFormat:@"- 第一课(日干): %@ 上 %@，%@乘%@\n- 第二课(日上): %@ 上 %@，%@乘%@\n- 第三课(支辰): %@ 上 %@，%@乘%@\n- 第四课(辰上): %@ 上 %@，%@乘%@", SafeString(k1_xia), SafeString(k1_shang), SafeString(k1_shang), SafeString(k1_jiang), SafeString(k2_xia), SafeString(k2_shang), SafeString(k2_shang), SafeString(k2_jiang), SafeString(k3_xia), SafeString(k3_shang), SafeString(k3_shang), SafeString(k3_jiang), SafeString(k4_xia), SafeString(k4_shang), SafeString(k4_shang), SafeString(k4_jiang) ];
}
%new
- (NSString *)_echo_extractSanChuanInfo {
    Class sanChuanViewClass = NSClassFromString(@"六壬大占.傳視圖"); if (!sanChuanViewClass) return @"";
    NSMutableArray *scViews = [NSMutableArray array]; FindSubviewsOfClassRecursive(sanChuanViewClass, self.view, scViews);
    [scViews sortUsingComparator:^NSComparisonResult(UIView *o1, UIView *o2) { return [@(o1.frame.origin.y) compare:@(o2.frame.origin.y)]; }];
    NSArray *titles = @[@"初传", @"中传", @"末传"]; NSMutableArray *lines = [NSMutableArray array];
    for (NSUInteger i = 0; i < scViews.count; i++) {
        UIView *v = scViews[i]; NSMutableArray *labels = [NSMutableArray array]; FindSubviewsOfClassRecursive([UILabel class], v, labels);
        [labels sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2) { return [@(o1.frame.origin.x) compare:@(o2.frame.origin.x)]; }];
        if (labels.count >= 3) {
            NSString *lq = [[(UILabel*)labels.firstObject text] stringByReplacingOccurrencesOfString:@"->" withString:@""];
            NSString *tj = [(UILabel*)labels.lastObject text]; NSString *dz = [(UILabel*)[labels objectAtIndex:labels.count - 2] text];
            NSMutableArray *ssParts = [NSMutableArray array];
            if (labels.count > 3) { for (UILabel *l in [labels subarrayWithRange:NSMakeRange(1, labels.count - 3)]) { if (l.text.length > 0) [ssParts addObject:l.text]; } }
            NSString *ss = [ssParts componentsJoinedByString:@", "];
            NSString *title = (i < titles.count) ? titles[i] : [NSString stringWithFormat:@"%lu传", (unsigned long)i+1];
            [lines addObject:[NSString stringWithFormat:@"- %@: %@ (%@, %@) [状态: %@]", title, SafeString(dz), SafeString(lq), SafeString(tj), ss.length > 0 ? ss : @"无"]];
        }
    }
    return [lines componentsJoinedByString:@"\n"];
}
%new
- (void)extractNianmingInfoWithCompletion:(void (^)(NSString *nianmingText))completion {
    LogMessage(EchoLogTypeTask, @"[任务启动] 模式: 行年参数");
    g_isExtractingNianming = YES; g_capturedZhaiYaoArray = [NSMutableArray array]; g_capturedGeJuArray = [NSMutableArray array];
    UICollectionView *targetCV = nil;
    Class unitClass = NSClassFromString(@"六壬大占.行年單元");
    NSMutableArray *cvs = [NSMutableArray array]; FindSubviewsOfClassRecursive([UICollectionView class], self.view, cvs);
    for (UICollectionView *cv in cvs) { if ([cv.visibleCells.firstObject isKindOfClass:unitClass]) { targetCV = cv; break; } }
    if (!targetCV) { LogMessage(EchoLogTypeWarning, @"[行年] 未找到行年单元，跳过分析。"); g_isExtractingNianming = NO; if (completion) { completion(@""); } return; }
    NSMutableArray *allUnitCells = [NSMutableArray array];
    for (UIView *cell in targetCV.visibleCells) { if([cell isKindOfClass:unitClass]){ [allUnitCells addObject:cell]; } }
    [allUnitCells sortUsingComparator:^NSComparisonResult(UIView *v1, UIView *v2) { return [@(v1.frame.origin.x) compare:@(v2.frame.origin.x)]; }];
    if (allUnitCells.count == 0) { LogMessage(EchoLogTypeWarning, @"[行年] 行年单元数量为0，跳过分析。"); g_isExtractingNianming = NO; if (completion) { completion(@""); } return; }
    LogMessage(EchoLogTypeInfo, @"[行年] 发现 %lu 个参数，开始构建任务队列...", (unsigned long)allUnitCells.count);
    NSMutableArray *workQueue = [NSMutableArray array];
    for (NSUInteger i = 0; i < allUnitCells.count; i++) {
        UICollectionViewCell *cell = allUnitCells[i];
        [workQueue addObject:@{@"type": @"年命摘要", @"cell": cell, @"index": @(i)}];
        [workQueue addObject:@{@"type": @"格局方法", @"cell": cell, @"index": @(i)}];
    }
    __weak typeof(self) weakSelf = self;
    __block void (^processQueue)(void);
    processQueue = [^{
        __strong typeof(weakSelf) strongSelf = weakSelf;
        if (!strongSelf || workQueue.count == 0) {
            LogMessage(EchoLogTypeTask, @"[行年] 所有参数分析完毕。");
            NSMutableString *resultStr = [NSMutableString string];
            NSUInteger personCount = allUnitCells.count;
            for (NSUInteger i = 0; i < personCount; i++) {
                NSString *zhaiYao = (i < g_capturedZhaiYaoArray.count) ? g_capturedZhaiYaoArray[i] : @"[摘要未获取]";
                NSString *geJu = (i < g_capturedGeJuArray.count) ? g_capturedGeJuArray[i] : @"[格局未获取]";
                [resultStr appendFormat:@"- 参数 %lu\n  摘要: %@\n  格局: %@", (unsigned long)i+1, zhaiYao, geJu];
                if (i < personCount - 1) { [resultStr appendString:@"\n\n"]; }
            }
            g_isExtractingNianming = NO; g_currentItemToExtract = nil;
            if (completion) { completion([resultStr stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]); }
            processQueue = nil;
            return;
        }
        NSDictionary *item = workQueue.firstObject; [workQueue removeObjectAtIndex:0];
        NSString *type = item[@"type"]; UICollectionViewCell *cell = item[@"cell"]; NSInteger index = [item[@"index"] integerValue];
        LogMessage(EchoLogTypeInfo, @"[行年] 正在处理参数 %ld 的 [%@]", (long)index + 1, type);
        g_currentItemToExtract = type;
        id delegate = targetCV.delegate; NSIndexPath *indexPath = [targetCV indexPathForCell:cell];
        if (delegate && indexPath && [delegate respondsToSelector:@selector(collectionView:didSelectItemAtIndexPath:)]) { [delegate collectionView:targetCV didSelectItemAtIndexPath:indexPath]; }
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{ processQueue(); });
    } copy];
    processQueue();
}
%new
- (id)GetIvarValueSafely:(id)object ivarNameSuffix:(NSString *)ivarNameSuffix { if (!object || !ivarNameSuffix) return nil; unsigned int ivarCount; Ivar *ivars = class_copyIvarList([object class], &ivarCount); if (!ivars) { free(ivars); return nil; } id value = nil; for (unsigned int i = 0; i < ivarCount; i++) { Ivar ivar = ivars[i]; const char *name = ivar_getName(ivar); if (name) { NSString *ivarName = [NSString stringWithUTF8String:name]; if ([ivarName hasSuffix:ivarNameSuffix]) { value = object_getIvar(object, ivar); break; } } } free(ivars); return value; }
%new
- (NSString *)GetStringFromLayer:(id)layer { if (layer && [layer respondsToSelector:@selector(string)]) { id stringValue = [layer valueForKey:@"string"]; if ([stringValue isKindOfClass:[NSString class]]) return stringValue; if ([stringValue isKindOfClass:[NSAttributedString class]]) return ((NSAttributedString *)stringValue).string; } return @"?"; }
%new
- (NSString *)formatNianmingGejuFromView:(UIView *)contentView { Class cellClass = NSClassFromString(@"六壬大占.格局單元"); if (!cellClass) return @""; NSMutableArray *cells = [NSMutableArray array]; FindSubviewsOfClassRecursive(cellClass, contentView, cells); [cells sortUsingComparator:^NSComparisonResult(UIView *v1, UIView *v2) { return [@(v1.frame.origin.y) compare:@(v2.frame.origin.y)]; }]; NSMutableArray<NSString *> *formattedPairs = [NSMutableArray array]; for (UIView *cell in cells) { NSMutableArray *labelsInCell = [NSMutableArray array]; FindSubviewsOfClassRecursive([UILabel class], cell, labelsInCell); if (labelsInCell.count > 0) { UILabel *titleLabel = labelsInCell[0]; NSString *title = [[titleLabel.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] stringByReplacingOccurrencesOfString:@"\n" withString:@" "]; NSMutableString *contentString = [NSMutableString string]; if (labelsInCell.count > 1) { for (NSUInteger i = 1; i < labelsInCell.count; i++) { [contentString appendString:((UILabel *)labelsInCell[i]).text]; } } NSString *content = [[contentString stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] stringByReplacingOccurrencesOfString:@"\n" withString:@" "]; NSString *pair = [NSString stringWithFormat:@"%@→%@", title, content]; if (![formattedPairs containsObject:pair]) { [formattedPairs addObject:pair]; } } } return [formattedPairs componentsJoinedByString:@" | "]; }
%new
- (NSString *)extractTextFromFirstViewOfClassName:(NSString *)className separator:(NSString *)separator { Class targetViewClass = NSClassFromString(className); if (!targetViewClass) { LogMessage(EchoLogError, @"[错误] 类名 '%@' 未找到。", className); return @""; } NSMutableArray *targetViews = [NSMutableArray array]; FindSubviewsOfClassRecursive(targetViewClass, self.view, targetViews); if (targetViews.count == 0) return @""; UIView *containerView = targetViews.firstObject; NSMutableArray *labelsInView = [NSMutableArray array]; FindSubviewsOfClassRecursive([UILabel class], containerView, labelsInView); [labelsInView sortUsingComparator:^NSComparisonResult(UILabel *o1, UILabel *o2) { if(roundf(o1.frame.origin.y) < roundf(o2.frame.origin.y)) return NSOrderedAscending; if(roundf(o1.frame.origin.y) > roundf(o2.frame.origin.y)) return NSOrderedDescending; return [@(o1.frame.origin.x) compare:@(o2.frame.origin.x)]; }]; NSMutableArray *textParts = [NSMutableArray array]; for (UILabel *label in labelsInView) { if (label.text && label.text.length > 0) { [textParts addObject:label.text]; } } return [textParts componentsJoinedByString:separator]; }
%new
- (NSString *)extractTianDiPanInfo_V18 { @try { Class plateViewClass = NSClassFromString(@"六壬大占.天地盤視圖") ?: NSClassFromString(@"六壬大占.天地盤視圖類"); if (!plateViewClass) return @"天地盘提取失败: 找不到视图类"; UIWindow *keyWindow = GetFrontmostWindow(); if (!keyWindow) return @"天地盘提取失败: 找不到keyWindow"; NSMutableArray *plateViews = [NSMutableArray array]; FindSubviewsOfClassRecursive(plateViewClass, keyWindow, plateViews); if (plateViews.count == 0) return @"天地盘提取失败: 找不到视图实例"; UIView *plateView = plateViews.firstObject; id diGongDict = [self GetIvarValueSafely:plateView ivarNameSuffix:@"地宮宮名列"], tianShenDict = [self GetIvarValueSafely:plateView ivarNameSuffix:@"天神宮名列"], tianJiangDict = [self GetIvarValueSafely:plateView ivarNameSuffix:@"天將宮名列"]; if (!diGongDict || !tianShenDict || !tianJiangDict) return @"天地盘提取失败: 未能获取核心数据字典"; NSArray *diGongLayers=[diGongDict allValues], *tianShenLayers=[tianShenDict allValues], *tianJiangLayers=[tianJiangDict allValues]; if (diGongLayers.count!=12||tianShenLayers.count!=12||tianJiangLayers.count!=12) return @"天地盘提取失败: 数据长度不匹配"; NSMutableArray *allLayerInfos = [NSMutableArray array]; CGPoint center = [plateView convertPoint:CGPointMake(CGRectGetMidX(plateView.bounds), CGRectGetMidY(plateView.bounds)) toView:nil]; void (^processLayers)(NSArray *, NSString *) = ^(NSArray *layers, NSString *type) { for (id layer in layers) { if (![layer isKindOfClass:[CALayer class]]) continue; CALayer *pLayer = [layer presentationLayer] ?: layer; CGPoint pos = [pLayer.superlayer convertPoint:pLayer.position toLayer:nil]; CGFloat dx = pos.x - center.x; CGFloat dy = pos.y - center.y; [allLayerInfos addObject:@{ @"type": type, @"text": [self GetStringFromLayer:layer], @"angle": @(atan2(dy, dx)), @"radius": @(sqrt(dx*dx + dy*dy)) }]; } }; processLayers(diGongLayers, @"diPan"); processLayers(tianShenLayers, @"tianPan"); processLayers(tianJiangLayers, @"tianJiang"); NSMutableDictionary *palaceGroups = [NSMutableDictionary dictionary]; for (NSDictionary *info in allLayerInfos) { BOOL foundGroup = NO; for (NSNumber *angleKey in [palaceGroups allKeys]) { CGFloat diff = fabsf([info[@"angle"] floatValue] - [angleKey floatValue]); if (diff > M_PI) diff = 2*M_PI-diff; if (diff < 0.15) { [palaceGroups[angleKey] addObject:info]; foundGroup=YES; break; } } if (!foundGroup) { palaceGroups[info[@"angle"]] = [NSMutableArray arrayWithObject:info];} } NSMutableArray *palaceData = [NSMutableArray array]; for (NSNumber *groupAngle in palaceGroups) { NSMutableArray *group = palaceGroups[groupAngle]; if (group.count < 3) continue; [group sortUsingComparator:^NSComparisonResult(id o1, id o2) { return [o2[@"radius"] compare:o1[@"radius"]]; }]; NSString *diPan=@"?", *tianPan=@"?", *tianJiang=@"?"; for(NSDictionary* li in group){ if([li[@"type"] isEqualToString:@"diPan"]) diPan=li[@"text"]; else if([li[@"type"] isEqualToString:@"tianPan"]) tianPan=li[@"text"]; else if([li[@"type"] isEqualToString:@"tianJiang"]) tianJiang=li[@"text"]; } [palaceData addObject:@{ @"diPan": diPan, @"tianPan": tianPan, @"tianJiang": tianJiang }]; } if (palaceData.count != 12) return @"天地盘提取失败: 宫位数据不完整"; NSArray *order = @[@"子", @"丑", @"寅", @"卯", @"辰", @"巳", @"午", @"未", @"申", @"酉", @"戌", @"亥"]; [palaceData sortUsingComparator:^NSComparisonResult(NSDictionary *o1, NSDictionary *o2) { return [@([order indexOfObject:o1[@"diPan"]]) compare:@([order indexOfObject:o2[@"diPan"]])]; }]; NSMutableString *result = [NSMutableString string]; for (NSDictionary *entry in palaceData) { [result appendFormat:@"- %@宫: %@(%@)\n", entry[@"diPan"], entry[@"tianPan"], entry[@"tianJiang"]]; } return [result stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]; } @catch (NSException *exception) { return [NSString stringWithFormat:@"天地盘提取异常: %@", exception.reason]; } }

// << 新增 >> 神煞提取核心函数
%new
- (void)extractShenShaInfo_CompleteWithCompletion:(void (^)(NSString *result))completion {
    // 1. 【前置动作】找到 UISegmentedControl 并切换到 "神煞"
    NSMutableArray<UISegmentedControl *> *segmentControls = [NSMutableArray array];
    FindSubviewsOfClassRecursive([UISegmentedControl class], self.view, segmentControls);
    if (segmentControls.count == 0) {
        LogMessage(EchoLogError, @"[神煞] 错误: 找不到用于切换的 UISegmentedControl。");
        if (completion) completion(@"[提取失败: 找不到切换控件]");
        return;
    }
    UISegmentedControl *segmentControl = segmentControls.firstObject;
    NSInteger shenShaIndex = -1;
    for (int i = 0; i < segmentControl.numberOfSegments; i++) {
        if ([[segmentControl titleForSegmentAtIndex:i] containsString:@"神煞"]) { shenShaIndex = i; break; }
    }
    if (shenShaIndex == -1) {
        LogMessage(EchoLogError, @"[神煞] 错误: 在 UISegmentedControl 中找不到 '神煞' 选项。");
        if (completion) completion(@"[提取失败: 找不到'神煞'选项]");
        return;
    }
    LogMessage(EchoLogTypeInfo, @"[神煞] 找到切换控件，正在切换到 '神煞' (索引 %ld)...", (long)shenShaIndex);
    if (segmentControl.selectedSegmentIndex != shenShaIndex) {
        segmentControl.selectedSegmentIndex = shenShaIndex;
        [segmentControl sendActionsForControlEvents:UIControlEventValueChanged];
    }

    // 切换UI需要时间，延迟执行后续提取操作
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        
        // 2. 精确找到神煞主容器视图
        Class shenShaContainerClass = NSClassFromString(@"六壬大占.神煞行年視圖");
        if (!shenShaContainerClass) { if (completion) completion(@"[提取失败: 找不到容器类]"); return; }

        NSMutableArray *shenShaContainers = [NSMutableArray array];
        FindSubviewsOfClassRecursive(shenShaContainerClass, self.view, shenShaContainers);
        if (shenShaContainers.count == 0) { if (completion) completion(@""); return; }
        UIView *containerView = shenShaContainers.firstObject;
        
        // 3. 只在神煞主容器内部查找 UICollectionView
        NSMutableArray<UICollectionView *> *collectionViews = [NSMutableArray array];
        FindSubviewsOfClassRecursive([UICollectionView class], containerView, collectionViews);
        if (collectionViews.count == 0) { if (completion) completion(@"[提取失败: 找不到集合视图]"); return; }
        UICollectionView *collectionView = collectionViews.firstObject;
        
        // 4. 获取数据源和 Section 总数
        id<UICollectionViewDataSource> dataSource = collectionView.dataSource;
        if (!dataSource) { if (completion) completion(nil); return; }
        
        NSInteger totalSections = [dataSource respondsToSelector:@selector(numberOfSectionsInCollectionView:)] ? [dataSource numberOfSectionsInCollectionView:collectionView] : 1;
        LogMessage(EchoLogTypeInfo, @"[神煞] 发现 %ld 个 Section，将使用固定标题进行映射...", (long)totalSections);

        // 5. 使用硬编码的标题列表
        NSArray *sectionTitles = @[@"岁煞", @"季煞", @"月煞", @"旬煞", @"干煞", @"支煞"];

        // 6. 遍历所有 Section 和 Item
        NSMutableString *finalResultString = [NSMutableString string];
        for (NSInteger section = 0; section < totalSections; section++) {
            NSString *title = (section < sectionTitles.count) ? sectionTitles[section] : [NSString stringWithFormat:@"未知分类 %ld", (long)section + 1];
            [finalResultString appendFormat:@"\n// %@\n", title];

            NSInteger totalItemsInSection = [dataSource collectionView:collectionView numberOfItemsInSection:section];
            if(totalItemsInSection == 0) { [finalResultString appendString:@"\n"]; continue; }
            
            NSMutableArray<NSDictionary *> *cellDataList = [NSMutableArray array];
            for (NSInteger item = 0; item < totalItemsInSection; item++) {
                NSIndexPath *indexPath = [NSIndexPath indexPathForItem:item inSection:section];
                UICollectionViewCell *cell = [dataSource collectionView:collectionView cellForItemAtIndexPath:indexPath];
                UICollectionViewLayoutAttributes *attributes = [collectionView.collectionViewLayout layoutAttributesForItemAtIndexPath:indexPath];
                if (!cell || !attributes) continue;

                NSMutableArray *labels = [NSMutableArray array];
                FindSubviewsOfClassRecursive([UILabel class], cell.contentView, labels);
                [labels sortUsingComparator:^NSComparisonResult(UILabel *l1, UILabel *l2) { return [@(l1.frame.origin.x) compare:@(l2.frame.origin.x)]; }];
                NSMutableArray *textParts = [NSMutableArray array];
                for (UILabel *label in labels) { if (label.text.length > 0) [textParts addObject:label.text]; }
                
                [cellDataList addObject:@{@"textParts": textParts, @"frame": [NSValue valueWithCGRect:attributes.frame]}];
            }
            
            [cellDataList sortUsingComparator:^NSComparisonResult(NSDictionary *o1, NSDictionary *o2) {
                CGRect f1 = [o1[@"frame"] CGRectValue], f2 = [o2[@"frame"] CGRectValue];
                if (roundf(f1.origin.y) < roundf(f2.origin.y)) return NSOrderedAscending;
                if (roundf(f1.origin.y) > roundf(f2.origin.y)) return NSOrderedDescending;
                return [@(f1.origin.x) compare:@(f2.origin.x)];
            }];
            
            NSMutableString *sectionContent = [NSMutableString string];
            CGFloat lastY = -1.0;
            for (NSDictionary *cellData in cellDataList) {
                CGRect frame = [cellData[@"frame"] CGRectValue];
                NSArray *textParts = cellData[@"textParts"];
                if (textParts.count == 0) continue;

                if (lastY >= 0 && roundf(frame.origin.y) > roundf(lastY)) { [sectionContent appendString:@"\n"]; }
                if (sectionContent.length > 0 && ![sectionContent hasSuffix:@"\n"]) { [sectionContent appendString:@" |"]; }

                if (textParts.count == 1) { [sectionContent appendFormat:@"%@:", textParts.firstObject]; }
                else if (textParts.count >= 2) { [sectionContent appendFormat:@" %@(%@)", textParts[0], textParts[1]]; }
                
                lastY = frame.origin.y;
            }
            [finalResultString appendString:sectionContent];
            [finalResultString appendString:@"\n"];
        }
        
        LogMessage(EchoLogTypeSuccess, @"[神煞] 所有 Section 完整提取成功！");
        if (completion) completion([finalResultString stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]);
    });
}
%end

// =========================================================================
// 4. S1 提取函数定义
// =========================================================================
static NSString* extractDataFromSplitView_S1(UIView *rootView, BOOL includeXiangJie) {
    if (!rootView) return @"[错误: 根视图为空]";
    NSMutableString *finalResult = [NSMutableString string];
    NSMutableArray *stackViews = [NSMutableArray array];
    FindSubviewsOfClassRecursive([UIStackView class], rootView, stackViews);
    if (stackViews.count > 0) {
        UIStackView *mainStackView = stackViews.firstObject;
        NSMutableArray *blocks = [NSMutableArray array];
        NSMutableDictionary *currentBlock = nil;
        for (UIView *subview in mainStackView.arrangedSubviews) {
            if (![subview isKindOfClass:[UILabel class]]) continue;
            UILabel *label = (UILabel *)subview;
            NSString *text = label.text;
            if (!text || text.length == 0) continue;
            BOOL isTitle = (label.font.fontDescriptor.symbolicTraits & UIFontDescriptorTraitBold) != 0;
            if (isTitle) {
                if (currentBlock) [blocks addObject:currentBlock];
                currentBlock = [NSMutableDictionary dictionaryWithDictionary:@{@"title": text, @"content": [NSMutableString string]}];
            } else {
                if (currentBlock) {
                    NSMutableString *content = currentBlock[@"content"];
                    if (content.length > 0) [content appendString:@"\n"];
                    [content appendString:text];
                }
            }
        }
        if (currentBlock) [blocks addObject:currentBlock];
        for (NSDictionary *block in blocks) {
            NSString *title = block[@"title"];
            NSString *content = [block[@"content"] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
            if (content.length > 0) { [finalResult appendFormat:@"%@\n%@\n\n", title, content]; } 
            else { [finalResult appendFormat:@"%@\n\n", title]; }
        }
    }
    if (includeXiangJie) {
        Class tableViewClass = NSClassFromString(@"六壬大占.IntrinsicTableView");
        if (tableViewClass) {
            NSMutableArray *tableViews = [NSMutableArray array];
            FindSubviewsOfClassRecursive(tableViewClass, rootView, tableViews);
            if (tableViews.count > 0) {
                NSMutableArray *xiangJieLabels = [NSMutableArray array];
                FindSubviewsOfClassRecursive([UILabel class], tableViews.firstObject, xiangJieLabels);
                if (xiangJieLabels.count > 0) {
                    [finalResult appendString:@"// 详解内容\n\n"];
                    for (NSUInteger i = 0; i < xiangJieLabels.count; i += 2) {
                        UILabel *titleLabel = xiangJieLabels[i];
                        if (i + 1 >= xiangJieLabels.count && [titleLabel.text isEqualToString:@"详解"]) continue;
                        if (i + 1 < xiangJieLabels.count) { [finalResult appendFormat:@"%@→%@\n\n", titleLabel.text, ((UILabel*)xiangJieLabels[i+1]).text]; } 
                        else { [finalResult appendFormat:@"%@→\n\n", titleLabel.text]; }
                    }
                }
            }
        }
    }
    return [finalResult stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
}

// =========================================================================
// 5. 构造函数
// =========================================================================
%ctor {
    @autoreleasepool {
        MSHookMessageEx(NSClassFromString(@"UIViewController"), @selector(presentViewController:animated:completion:), (IMP)&Tweak_presentViewController, (IMP *)&Original_presentViewController);
        NSLog(@"[Echo解析引擎] v14.1 (ShenSha Final) 已加载。");
    }
}









